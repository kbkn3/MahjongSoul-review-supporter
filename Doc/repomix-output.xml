This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-16T05:30:10.055Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
- Code comments have been removed.
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
with-ai/
  .gitignore
  .prettierrc.mjs
  package.json
  popup.tsx
  README.md
  tsconfig.json
with-antd/
  .gitignore
  .prettierrc.mjs
  content.tsx
  options.tsx
  package.json
  popup.tsx
  README.md
  theme.tsx
  tsconfig.json
with-background/
  .gitignore
  .prettierrc.mjs
  background.ts
  package.json
  README.md
  tsconfig.json
with-browser-specific-overrides/
  .gitignore
  .mocharc.json
  .prettierrc.mjs
  background.ts
  build.test.ts
  package.json
  README.md
  tsconfig.json
with-client-tests/
  assets/
    expected-blog.json
    expected-header.html
  background/
    messages/
      test-handler.ts
  contents/
    content-isolated.ts
    main-world-tests.ts
    relay.ts
  contents-helpers/
    dom-structure.ts
    get-test-function.ts
  .gitignore
  .prettierrc.mjs
  package.json
  README.md
  tsconfig.json
with-content-script/
  .gitignore
  .prettierrc.mjs
  content.ts
  package.json
  README.md
  tsconfig.json
with-content-scripts-ui/
  contents/
    font.css
    google-sidebar-base.css
    google-sidebar.css
    google-sidebar.tsx
    hello.ts
    plasmo-inline.tsx
    plasmo-overlay-anchor.tsx
    plasmo-overlay-watch.tsx
    plasmo-overlay.css
    plasmo-overlay.tsx
    plasmo-root-container.tsx
  .gitignore
  .prettierrc.mjs
  package.json
  README.md
  tsconfig.json
with-css-modules/
  .gitignore
  .prettierrc.mjs
  content.tsx
  package.json
  popup.tsx
  README.md
  style.module.css
  tsconfig.json
with-declarative-net-request/
  rules/
    test.json
  .gitignore
  .prettierrc.mjs
  package.json
  README.md
  tsconfig.json
with-devtools/
  panels/
    font-picker/
      index.html
      index.tsx
    font-properties/
      index.html
      index.tsx
  .gitignore
  .prettierrc.mjs
  devtools.tsx
  package.json
  README.md
  tsconfig.json
with-emotion/
  .gitignore
  .prettierrc.mjs
  components.tsx
  content.tsx
  package.json
  popup.tsx
  README.md
  tsconfig.json
with-emotion-tailwindcss-antd/
  src/
    components/
      ButtonGroup/
        ButtonGroup.tsx
        ButtonItem.tsx
        type.ts
    contents/
      inject.tsx
      plasmo.tsx
    style.css
    tailwindCSS.css
  .gitignore
  .prettierrc.mjs
  package.json
  postcss.config.js
  README.md
  tailwind.config.js
  tsconfig.json
with-env/
  .gitignore
  .prettierrc.mjs
  background.ts
  content.ts
  example.env
  package.json
  popup.tsx
  README.md
  test.json
  tsconfig.json
with-firebase-auth/
  firebase/
    hook.ts
    index.ts
    use-firestore-doc.ts
  .gitignore
  .prettierrc.mjs
  example.env
  newtab.tsx
  package.json
  popup.tsx
  README.md
  tsconfig.json
with-firebase-fcm/
  .gitignore
  .prettierrc.mjs
  background.ts
  package.json
  README.md
  tsconfig.json
with-google-analytics/
  .gitignore
  .prettierrc.mjs
  example.env.local
  index.d.ts
  package.json
  popup.tsx
  README.md
  tsconfig.json
with-google-analytics-measurement/
  .gitignore
  .prettierrc.mjs
  background.ts
  example.env.local
  package.json
  popup.tsx
  README.md
  tsconfig.json
  utils.ts
with-inbox-sdk/
  .gitignore
  .prettierrc.mjs
  background.ts
  content.ts
  example.env
  package.json
  README.md
  tsconfig.json
with-jest/
  contents/
    hello.tsx
    index.ts
  tests/
    contents/
      hello.test.tsx
      index.test.ts
    README.md
  .gitignore
  .prettierrc.mjs
  jest.config.mjs
  package.json
  README.md
  tsconfig.json
with-jotai/
  .gitignore
  .prettierrc.mjs
  counter.tsx
  package.json
  popup.tsx
  README.md
  tsconfig.json
with-locales-i18n/
  locales/
    en/
      messages.json
    vi/
      messages.json
  .gitignore
  .prettierrc.mjs
  example.env
  package.json
  popup.tsx
  README.md
  tsconfig.json
with-main-world/
  background/
    index.ts
    injected-helper.ts
  contents/
    plasmo-main-ui.tsx
    plasmo-main.ts
  .gitignore
  .prettierrc.mjs
  index.d.ts
  package.json
  README.md
  tsconfig.json
with-mantine/
  contents/
    multiple.tsx
    overlay.tsx
  styles/
    mantine-override.css
  .gitignore
  .prettierrc.mjs
  package.json
  popup.tsx
  postcss.config.cjs
  README.md
  theme.tsx
  tsconfig.json
  utils.ts
with-many-content-scripts/
  contents/
    nested/
      index.tsx
    all-urls.ts
    plasmo.ts
    vulcan.ts
  core/
    quote.ts
  .gitignore
  .prettierrc.mjs
  package.json
  README.md
  tsconfig.json
with-many-targets/
  popup/
    index.brave.tsx
    index.firefox.tsx
    index.tsx
  .gitignore
  .prettierrc.mjs
  package.json
  README.md
  tsconfig.json
with-mellowtel/
  .gitignore
  .prettierrc.mjs
  background.ts
  content.ts
  example.env.local
  package.json
  popup.tsx
  README.md
  tsconfig.json
with-messaging/
  background/
    messages/
      math/
        add.ts
      get-manifest.ts
      hash-tx.ts
      open-extension.ts
    ports/
      mail.ts
    index.ts
  contents/
    any-url-query-text.tsx
    client-hub-main-world.ts
    handle-main-world.ts
    index.ts
    main-world.ts
    porter.tsx
  pages/
    client-hub-a.tsx
    client-hub-b.tsx
    index.tsx
  tabs/
    delta.tsx
  .gitignore
  .prettierrc.mjs
  example.env
  next-env.d.ts
  package.json
  popup.tsx
  README.md
  tsconfig.json
  window.d.ts
with-microsoft-clarity/
  resources/
    clarity.js
  .gitignore
  .prettierrc.mjs
  background.ts
  injectClarity.ts
  package.json
  README.md
  tsconfig.json
with-mui/
  .gitignore
  .prettierrc.mjs
  content.tsx
  package.json
  popup.tsx
  README.md
  tsconfig.json
with-multiple-tailwindcss/
  contents/
    index.tsx
    style.css
    tailwind.config.js
  popup/
    index.tsx
    style.css
    tailwind.config.js
  .gitignore
  .prettierrc.mjs
  package.json
  postcss.config.js
  README.md
  tsconfig.json
with-newtab/
  .gitignore
  .prettierrc.mjs
  newtab.tsx
  package.json
  README.md
  tsconfig.json
with-nextjs/
  src/
    components/
      main.tsx
    pages/
      index.tsx
    popup/
      index.tsx
  .gitignore
  .prettierrc.mjs
  next-env.d.ts
  package.json
  README.md
  tsconfig.json
with-options-ui/
  .gitignore
  .prettierrc.mjs
  options.tsx
  package.json
  README.md
  tsconfig.json
with-permission-ui/
  .gitignore
  .prettierrc.mjs
  options.tsx
  package.json
  README.md
  tsconfig.json
with-popup/
  .gitignore
  .prettierrc.mjs
  package.json
  popup.tsx
  README.md
  tsconfig.json
with-propelauth/
  background/
    messages/
      ping.ts
  .gitignore
  .prettierrc.mjs
  example.env
  package.json
  popup.tsx
  README.md
  tsconfig.json
with-react-native/
  .gitignore
  .prettierrc.mjs
  package.json
  popup.tsx
  README.md
  tsconfig.json
with-react-query/
  .gitignore
  .prettierrc.mjs
  newtab.production.tsx
  newtab.tsx
  package.json
  popup.tsx
  README.md
  search.tsx
  tsconfig.json
with-react-router/
  routes/
    about.tsx
    home.tsx
    index.production.tsx
    index.tsx
    lazy-route.tsx
  views/
    demo.tsx
  .gitignore
  .prettierrc.mjs
  package.json
  popup.production.tsx
  popup.tsx
  README.md
  tsconfig.json
with-redux/
  .gitignore
  .prettierrc.mjs
  background.ts
  counter-slice.ts
  counter.tsx
  options.tsx
  package.json
  popup.tsx
  README.md
  store.ts
  tsconfig.json
with-selector/
  .gitignore
  .prettierrc.mjs
  background.ts
  content.tsx
  example.env
  package.json
  README.md
  tsconfig.json
with-sentry/
  .gitignore
  .prettierrc.mjs
  content.ts
  package.json
  popup.tsx
  README.md
  sentry.ts
  tsconfig.json
with-sidepanel/
  .gitignore
  .prettierrc.mjs
  package.json
  README.md
  sidepanel.tsx
  tsconfig.json
with-slate/
  .gitignore
  .prettierrc.mjs
  package.json
  popup.tsx
  README.md
  tsconfig.json
with-src/
  src/
    contents/
      plasmo.ts
    background.ts
    newtab.tsx
    options.tsx
    popup.tsx
    style.css
  .gitignore
  .prettierrc.mjs
  package.json
  README.md
  tsconfig.json
with-storage/
  .gitignore
  .prettierrc.mjs
  background.ts
  content.tsx
  example.env
  options.tsx
  package.json
  popup.tsx
  README.md
  tsconfig.json
with-stripe/
  core/
    access-token.ts
    premium-api.ts
    user-info.tsx
  pages/
    api/
      _common.ts
      check-subscription.ts
      premium-feature.ts
  .gitignore
  .prettierrc.mjs
  example.env.development
  index.d.ts
  next-env.d.ts
  package.json
  popup.tsx
  README.md
  tsconfig.json
with-styled-components/
  .gitignore
  .prettierrc.mjs
  components.tsx
  content.tsx
  package.json
  popup.tsx
  README.md
  tsconfig.json
with-supabase/
  background/
    messages/
      init-session.ts
    index.ts
  core/
    supabase.ts
  .gitignore
  .prettierrc.mjs
  example.env
  options.tsx
  package.json
  README.md
  tsconfig.json
with-svelte/
  contents/
    plasmo-inline.svelte
    plasmo-overlay.css
    plasmo-overlay.svelte
  .gitignore
  .prettierrc.mjs
  package.json
  popup.svelte
  README.md
  sandbox.svelte
  svelte.config.mjs
  tsconfig.json
with-tabs/
  tabs/
    delta-flyer.html
    delta-flyer.tsx
  .gitignore
  .prettierrc.mjs
  package.json
  popup.tsx
  README.md
  tsconfig.json
with-tailwindcss/
  src/
    features/
      count-button.tsx
    content.tsx
    popup.tsx
    style.css
  .gitignore
  .prettierrc.mjs
  package.json
  postcss.config.js
  README.md
  tailwind.config.js
  tsconfig.json
with-tw-radix/
  cfg/
    radix.js
    tailwind.base.js
    tailwind.config.js
  src/
    features/
      count-button.tsx
    base.css
    content.tsx
    popup.tsx
    style.css
  .gitignore
  .prettierrc.mjs
  package.json
  postcss.config.js
  README.md
  tsconfig.json
with-vue/
  contents/
    plasmo-inline.vue
    plasmo-overlay.css
    plasmo-overlay.vue
  .gitignore
  .prettierrc.mjs
  package.json
  popup.vue
  README.md
  tsconfig.json
with-web-accessible-resources/
  assets/
    logo.svg
  resources/
    test.json
  .gitignore
  .prettierrc.mjs
  package.json
  popup.tsx
  raw.js
  README.md
  tsconfig.json
.gitignore
LICENSE
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="with-ai/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

out/
build/
dist/

# plasmo
.plasmo

# typescript
.tsbuildinfo
</file>

<file path="with-ai/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-ai/package.json">
{
  "name": "with-ai",
  "displayName": "With ai",
  "version": "0.0.1",
  "description": "A scaffold for AI extensions using Plasmo framework",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "Plasmo Corp. <foss@plasmo.com>"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "compromise": "14.11.1",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-ai/popup.tsx">
import three from "compromise/three"
import { useState } from "react"
function IndexPopup() {
  const [data, setData] = useState("")
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16
      }}>
      <h2>
        Welcome to your
        <a href="https://www.plasmo.com" target="_blank">
          {" "}
          Plasmo
        </a>{" "}
        Extension!
      </h2>
      <input onChange={(e) => setData(e.target.value)} value={data} />
      <a href="https://docs.plasmo.com" target="_blank">
        View Docs
      </a>
    </div>
  )
}
export default IndexPopup
</file>

<file path="with-ai/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-ai/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-antd/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-antd/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-antd/content.tsx">
import { StyleProvider } from "@ant-design/cssinjs"
import Button from "antd/es/button"
import antdResetCssText from "data-text:antd/dist/reset.css"
import type { PlasmoCSConfig, PlasmoGetShadowHostId } from "plasmo"
import { ThemeProvider } from "~theme"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}
const HOST_ID = "engage-csui"
export const getShadowHostId: PlasmoGetShadowHostId = () => HOST_ID
export const getStyle = () => {
  const style = document.createElement("style")
  style.textContent = antdResetCssText
  return style
}
const EngageOverlay = () => (
  <ThemeProvider>
    <StyleProvider container={document.getElementById(HOST_ID).shadowRoot}>
      <Button type="primary">Engage</Button>
    </StyleProvider>
  </ThemeProvider>
)
export default EngageOverlay
</file>

<file path="with-antd/options.tsx">
import Button from "antd/es/button"
import { ThemeProvider } from "~theme"
function IndexOption() {
  return (
    <ThemeProvider>
      <div
        style={{
          display: "flex",
          flexDirection: "column",
          padding: 16
        }}>
        <h1>
          Welcome to your <a href="https://www.plasmo.com">Plasmo</a> Extension!
        </h1>
        <Button type="primary">Fascinating</Button>
      </div>
    </ThemeProvider>
  )
}
export default IndexOption
</file>

<file path="with-antd/package.json">
{
  "name": "with-antd",
  "displayName": "With ant design",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv",
    "coldsauce"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build"
  },
  "dependencies": {
    "@ant-design/cssinjs": "1.18.2",
    "antd": "5.13.2",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-antd/popup.tsx">
import Button from "antd/es/button"
import { ThemeProvider } from "~theme"
function IndexPopup() {
  return (
    <ThemeProvider>
      <div
        style={{
          display: "flex",
          flexDirection: "column",
          padding: 16
        }}>
        <h1>
          Welcome to your <a href="https://www.plasmo.com">Plasmo</a> Extension!
        </h1>
        <Button type="primary">Live long and prosper</Button>
      </div>
    </ThemeProvider>
  )
}
export default IndexPopup
</file>

<file path="with-antd/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-antd/theme.tsx">
import ConfigProvider from "antd/es/config-provider"
import type { ReactNode } from "react"
export const ThemeProvider = ({ children = null as ReactNode }) => (
  <ConfigProvider
    theme={{
      token: {
        colorPrimary: "#a1701d"
      }
    }}>
    {children}
  </ConfigProvider>
)
</file>

<file path="with-antd/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-background/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

out/
build/
dist/

# plasmo
.plasmo

# typescript
.tsbuildinfo
</file>

<file path="with-background/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-background/background.ts">
import { generateMnemonic } from "bip39"
console.log(
  "Live now; make now always the most precious time. Now will never come again."
)
chrome.action.onClicked.addListener(() => {
  console.log(`action clicked: ${generateMnemonic()}`)
})
chrome.commands.onCommand.addListener((command) => {
  if (command === "test") {
    console.log(`test command: ${generateMnemonic()}`)
  }
})
</file>

<file path="with-background/package.json">
{
  "name": "with-background",
  "displayName": "With background",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "coldsauce"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"  
  },
  "dependencies": {
    "bip39": "3.1.0",
    "buffer": "6.0.3",
    "events": "3.3.0",
    "plasmo": "workspace:*",
    "process": "0.11.10",
    "stream-browserify": "3.0.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ],
    "commands": {
      "test": {
        "suggested_key": {
          "default": "Alt+W"
        },
        "description": "Open the extension main popup"
      }
    }
  }
}
</file>

<file path="with-background/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-background/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-browser-specific-overrides/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

out/
build/
dist/

# plasmo
.plasmo

# typescript
.tsbuildinfo
</file>

<file path="with-browser-specific-overrides/.mocharc.json">
{
    "$schema": "https://json.schemastore.org/mocharc.json",
    "require": "tsx"
}
</file>

<file path="with-browser-specific-overrides/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-browser-specific-overrides/background.ts">
import { generateMnemonic } from "bip39"
console.log(
  "Live now; make now always the most precious time. Now will never come again."
)
chrome.action.onClicked.addListener(() => {
  console.log(`action clicked: ${generateMnemonic()}`)
})
chrome.commands.onCommand.addListener((command) => {
  if (command === "test") {
    console.log(`test command: ${generateMnemonic()}`)
  } else if (command === "test-chrome") {
    console.log(`chrome specific command: ${generateMnemonic()}`)
  }
})
</file>

<file path="with-browser-specific-overrides/build.test.ts">
import { assert } from 'chai';
import { exec } from 'child_process';
import { promisify } from 'util';
describe('with-browser-specific-overrides', () => {
    let pexec = promisify(exec)
    it('contains no overrides or specific settings if not targeted', async () => {
        await pexec("pnpm build --target=firefox-mv3")
        const manifest = require('./build/firefox-mv3-prod/manifest.json')
        const commands = manifest.commands
        assert.isDefined(commands)
        assert.isDefined(commands['test'])
        assert.isUndefined(commands['test-chrome'])
        assert.isUndefined(manifest.overrides)
    }).timeout(10000)
    it('contains browser specific settings if targeted', async () => {
        await pexec("pnpm build --target=chrome-mv3")
        const manifest = require('./build/chrome-mv3-prod/manifest.json')
        const commands = manifest.commands
        assert.isDefined(commands)
        assert.isDefined(commands['test'])
        assert.isDefined(commands['test-chrome'])
        assert.isUndefined(manifest.overrides)
    }).timeout(10000)
})
</file>

<file path="with-browser-specific-overrides/package.json">
{
  "name": "with-browser-specific-overrides",
  "displayName": "With browser specific overrides",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Theodore Brockman <iam@theo.lol>",
  "contributors": [
    "tbrockman"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "test": "mocha build.test.ts",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "bip39": "3.1.0",
    "buffer": "6.0.3",
    "events": "3.3.0",
    "plasmo": "workspace:*",
    "process": "0.11.10",
    "stream-browserify": "3.0.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chai": "4.3.19",
    "@types/chrome": "0.0.258",
    "@types/mocha": "10.0.7",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "chai": "5.1.1",
    "mocha": "10.7.3",
    "prettier": "3.2.4",
    "tsx": "4.19.0",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ],
    "commands": {
      "test": {
        "suggested_key": {
          "default": "Alt+W"
        },
        "description": "Print a console log"
      }
    },
    "overrides": {
      "chrome": {
        "commands": {
          "test": {
            "suggested_key": {
              "default": "Alt+W"
            },
            "description": "Print a console log"
          },
          "test-chrome": {
            "suggested_key": {
              "default": "Alt+X"
            },
            "description": "Print a console log specific to Chrome"
          }
        }
      }
    }
  }
}
</file>

<file path="with-browser-specific-overrides/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-browser-specific-overrides/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-client-tests/assets/expected-blog.json">
{
  "type": "object",
  "properties": {
    "pageProps": {
      "type": "object",
      "properties": {
        "posts": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": { "type": "string" },
              "title": { "type": "string" },
              "tags": {
                "type": "array",
                "items": { "type": "string" }
              },
              "description": { "type": "string" },
              "author": { "type": "string" },
              "authorImageUrl": { "type": "string" },
              "date": { "type": "string" },
              "slug": { "type": "string" },
              "isPinned": { "type": "boolean" },
              "pinnedDescription": { "type": ["string", "null"] },
              "coverUrl": { "type": "string" },
              "time": {
                "type": "object",
                "properties": {
                  "text": { "type": "string" },
                  "minutes": { "type": "number" },
                  "time": { "type": "integer" },
                  "words": { "type": "integer" }
                },
                "required": ["text", "minutes", "time", "words"]
              }
            },
            "required": [
              "id",
              "title",
              "tags",
              "description",
              "author",
              "authorImageUrl",
              "date",
              "slug",
              "isPinned",
              "pinnedDescription",
              "coverUrl",
              "time"
            ]
          }
        },
        "pinned": {
          "type": "object",
          "properties": {
            "id": { "type": "string" },
            "title": { "type": "string" },
            "tags": {
              "type": "array",
              "items": { "type": "string" }
            },
            "description": { "type": "string" },
            "author": { "type": "string" },
            "authorImageUrl": { "type": "string" },
            "date": { "type": "string" },
            "slug": { "type": "string" },
            "isPinned": { "type": "boolean" },
            "pinnedDescription": { "type": "string" },
            "coverUrl": { "type": "string" },
            "time": {
              "type": "object",
              "properties": {
                "text": { "type": "string" },
                "minutes": { "type": "number" },
                "time": { "type": "integer" },
                "words": { "type": "integer" }
              },
              "required": ["text", "minutes", "time", "words"]
            }
          },
          "required": [
            "id",
            "title",
            "tags",
            "description",
            "author",
            "authorImageUrl",
            "date",
            "slug",
            "isPinned",
            "pinnedDescription",
            "coverUrl",
            "time"
          ]
        }
      },
      "required": ["posts", "pinned"]
    },
    "__N_SSG": { "type": "boolean" }
  },
  "required": ["pageProps", "__N_SSG"]
}
</file>

<file path="with-client-tests/assets/expected-header.html">
<header
  class="sticky top-4 flex w-full justify-center lg:px-8 px-4 py-2 z-[470]"
>
  <div
    class="items-center justify-between flex w-full max-w-screen-xl pl-6 pr-1 lg:px-8 px-4 py-2 rounded-lg lg:rounded-full css-1o7lg93 eyvtvcj0"
  >
    <a
      class="flex gap-2 justify-center items-center text-mauve-12 hover:text-mauve-11"
      href="/"
      ><svg width="34" height="44" viewBox="0 0 34 44" class="w-6">
        <path
          d="M16.8667 35.0812C19.2967 35.0812 21.3513 37.1684 20.1782 39.2965C20.0389 39.5493 19.8866 39.7962 19.7218 40.0362C18.7146 41.503 17.2829 42.6461 15.6079 43.3212C13.933 43.9962 12.0898 44.1728 10.3117 43.8287C8.53353 43.4846 6.90019 42.6351 5.6182 41.3878C4.33622 40.1405 3.46318 38.5513 3.10948 36.8211C2.75579 35.091 2.93732 33.2977 3.63112 31.668C4.32492 30.0383 5.49984 28.6454 7.00729 27.6653C7.2829 27.4862 7.56736 27.3223 7.8593 27.174C10.0261 26.0739 12.1 28.1322 12.1 30.5622V30.6812C12.1 33.1112 14.07 35.0812 16.5 35.0812H16.8667Z"
          fill="currentColor"
        ></path>
        <path
          d="M24.5666 18.6702C24.5666 16.2401 26.6405 14.1819 28.8073 15.282C29.0992 15.4302 29.3837 15.5941 29.6593 15.7733C31.1667 16.7533 32.3417 18.1463 33.0355 19.776C33.7293 21.4057 33.9108 23.199 33.5571 24.9291C33.2034 26.6592 32.3304 28.2484 31.0484 29.4957C29.7664 30.7431 28.1331 31.5925 26.3549 31.9367C24.5767 32.2808 22.7336 32.1042 21.0586 31.4291C19.3836 30.7541 17.952 29.6109 16.9448 28.1442C16.7799 27.9042 16.6277 27.6573 16.4883 27.4045C15.3153 25.2763 17.3698 23.1891 19.7999 23.1891L20.1666 23.1891C22.5966 23.1891 24.5666 21.2192 24.5666 18.7891L24.5666 18.6702Z"
          fill="currentColor"
        ></path>
        <path
          d="M12.2224 19.3838C12.2224 21.8138 10.1936 23.8563 7.91208 23.0198C7.04393 22.7014 6.21144 22.2863 5.43205 21.7796C3.42212 20.4729 1.85557 18.6157 0.930494 16.4427C0.00542386 14.2698 -0.236617 11.8787 0.234979 9.5719C0.706577 7.2651 1.87063 5.14617 3.57994 3.48305C5.28925 1.81994 7.46704 0.68735 9.83792 0.228499C12.2088 -0.230353 14.6663 0.00514682 16.8996 0.905216C19.1329 1.80529 21.0418 3.3295 22.3848 5.28511C22.8846 6.01303 23.2978 6.78854 23.6195 7.59666C24.5183 9.85439 22.4746 11.8919 20.0446 11.8919L16.6224 11.8919C14.1923 11.8919 12.2224 13.8618 12.2224 16.2919L12.2224 19.3838Z"
          fill="currentColor"
        ></path></svg
      ><span class="font-extrabold text-2xl italic">plasmo</span></a
    >
    <div
      class="opacity-0 pointer-events-none flex flex-col lg:flex-row absolute transition-all bg-violet-3 lg:bg-transparent lg:top-0 left-0 top-20 w-full rounded-lg p-3 gap-x-4 gap-y-2 h-auto lg:flex-1 lg:pl-7 lg:relative lg:opacity-100 lg:pointer-events-auto"
    >
      <div
        class="flex flex-col lg:flex-row gap-x-4 gap-y-2 max-h-[calc(100vh-180px)]"
      >
        <a
          class="flex items-center text-2xl lg:text-lg px-4 py-2 transition-all hover:shadow-md rounded-lg border-b-4 border-mauve-6 lg:border-none bg-mauve-1 lg:bg-transparent hover:bg-mauve-2 text-mauve-11 hover:text-mauve-12 justify-between"
          href="/docs"
          >Documentation<svg
            width="1.5em"
            height="1.5em"
            stroke-width="1.5"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            color="currentColor"
            class="lg:hidden h-8"
          >
            <path
              d="M9 6l6 6-6 6"
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
            ></path></svg></a
        ><a
          class="flex items-center text-2xl lg:text-lg px-4 py-2 transition-all hover:shadow-md rounded-lg border-b-4 border-mauve-6 lg:border-none bg-mauve-1 lg:bg-transparent hover:bg-mauve-2 text-mauve-11 hover:text-mauve-12 justify-between"
          href="/#pricing"
          >Pricing<svg
            width="1.5em"
            height="1.5em"
            stroke-width="1.5"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            color="currentColor"
            class="lg:hidden h-8"
          >
            <path
              d="M9 6l6 6-6 6"
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
            ></path></svg
        ></a>
      </div>
    </div>
    <div class="bg-transparent gap-x-4 flex p-3">
      <a
        class="flex items-center text-2xl lg:text-lg px-4 py-2 transition-all hover:shadow-md rounded-lg border-b-4 border-mauve-6 lg:border-none bg-mauve-1 lg:bg-transparent hover:bg-mauve-2 text-mauve-11 hover:text-mauve-12 justify-between"
        href="/s/gh"
        ><svg
          width="1.5em"
          height="1.5em"
          stroke-width="1.5"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          color="currentColor"
        >
          <path
            d="M16 22.027v-2.87a3.37 3.37 0 00-.94-2.61c3.14-.35 6.44-1.54 6.44-7a5.44 5.44 0 00-1.5-3.75 5.07 5.07 0 00-.09-3.77s-1.18-.35-3.91 1.48a13.38 13.38 0 00-7 0c-2.73-1.83-3.91-1.48-3.91-1.48A5.07 5.07 0 005 5.797a5.44 5.44 0 00-1.5 3.78c0 5.42 3.3 6.61 6.44 7a3.37 3.37 0 00-.94 2.58v2.87M9 20.027c-3 .973-5.5 0-7-3"
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
          ></path></svg
        ><svg
          width="1.5em"
          height="1.5em"
          stroke-width="1.5"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          color="currentColor"
          class="lg:hidden h-8"
        >
          <path
            d="M9 6l6 6-6 6"
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
          ></path></svg></a
      ><a
        class="flex items-center text-2xl lg:text-lg px-4 py-2 transition-all hover:shadow-md rounded-lg border-b-4 border-mauve-6 lg:border-none bg-mauve-1 lg:bg-transparent hover:bg-mauve-2 text-mauve-11 hover:text-mauve-12 justify-between"
        href="/s/d"
        ><svg
          width="1.5em"
          height="1.5em"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          color="currentColor"
        >
          <path
            d="M5.5 16c5 2.5 8 2.5 13 0M15.5 17.5l1 2s4.171-1.328 5.5-3.5c0-1 .53-8.147-3-10.5-1.5-1-4-1.5-4-1.5l-1 2h-2"
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
          ></path>
          <path
            d="M8.528 17.5l-1 2s-4.171-1.328-5.5-3.5c0-1-.53-8.147 3-10.5 1.5-1 4-1.5 4-1.5l1 2h2"
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
          ></path>
          <path
            d="M8.5 14c-.828 0-1.5-.895-1.5-2s.672-2 1.5-2 1.5.895 1.5 2-.672 2-1.5 2zM15.5 14c-.828 0-1.5-.895-1.5-2s.672-2 1.5-2 1.5.895 1.5 2-.672 2-1.5 2z"
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
          ></path></svg
        ><svg
          width="1.5em"
          height="1.5em"
          stroke-width="1.5"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          color="currentColor"
          class="lg:hidden h-8"
        >
          <path
            d="M9 6l6 6-6 6"
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
          ></path></svg></a
      ><a
        class="flex items-center text-2xl lg:text-lg px-4 py-2 transition-all hover:shadow-md rounded-lg border-b-4 border-mauve-6 lg:border-none bg-mauve-1 lg:bg-transparent hover:bg-mauve-2 text-mauve-11 hover:text-mauve-12 justify-between"
        href="/p/itero"
        >Log In<svg
          width="1.5em"
          height="1.5em"
          stroke-width="1.5"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          color="currentColor"
          class="lg:hidden h-8"
        >
          <path
            d="M9 6l6 6-6 6"
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
          ></path></svg></a
      ><a
        class="flex items-center text-2xl lg:text-lg px-4 py-2 transition-all hover:shadow-md rounded-lg border-b-4 border-mauve-6 lg:border-none bg-violet-9 hover:bg-violet-10 text-violet-1 font-bold"
        href="/p/itero"
        >Sign Up for Free<svg
          width="1.5em"
          height="1.5em"
          stroke-width="1.5"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          color="currentColor"
          class="lg:hidden h-8"
        >
          <path
            d="M9 6l6 6-6 6"
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
          ></path></svg
      ></a>
    </div>
  </div>
</header>
</file>

<file path="with-client-tests/background/messages/test-handler.ts">
import type { PlasmoMessaging } from "@plasmohq/messaging"
type testResults = {
  id: number
  name: string
  todo: boolean
  type: string
  skip?: boolean
  actual?: any
  expected?: any
  error?: {
    message: string
    stack: string
  }
}
export type TestRequest = {
  test: testResults
}
export const handler: PlasmoMessaging.MessageHandler<TestRequest, any> = async (
  req,
  res
) => {
  const { test } = req.body
  console.log(test)
  res.send({
    message: "Test received"
  })
}
export default handler
</file>

<file path="with-client-tests/contents/content-isolated.ts">
import type { PlasmoCSConfig } from "plasmo";
import expectedDom from "data-text:~assets/expected-header.html";
import { normalizeStructure } from "~contents-helpers/dom-structure";
import { getTestFunction } from "~contents-helpers/get-test-function";
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"],
  run_at: "document_idle",
};
const init = () => {
  const test = getTestFunction();
  test("Some valid examples from https://github.com/denysdovhan/wtfjs", (t) => {
    t.notOk(true == ![], "true == ![]");
    t.notOk(true == [], "true == []");
    t.ok(
      "b" + "a" + +"a" + "a" === "baNaNa",
      '"b" + "a" + +"a" + "a" === "baNaNa"'
    );
    t.notOk(Object.is(-0, 0), "Object.is(-0, 0)");
    t.ok(-0 === 0, "-0 === 0");
    t.end();
  });
  test("A test that should fail, for testing purposes", (t) => {
    t.deepEqual(
      {
        hi: false,
      },
      {
        hi: {
          bye: false,
        },
      },
      "hi should equal bye"
    );
    t.end();
  });
  test("timing test", (t) => {
    t.plan(2);
    t.equal(typeof Date.now, "function");
    var start = Date.now();
    setTimeout(() => {
      t.equal(Date.now() - start, 100, "Timing test should be 100ms");
    }, 100);
  });
  test("test using promises", async (t) => {
    const result = await new Promise((resolve) => {
      setTimeout(() => {
        resolve(true);
      }, 100);
    });
    t.ok(result);
  });
  test("testing the DOM structure of plasmo.com - May fail dependent on plasmo.com site changes", (t) => {
    const parser = new DOMParser();
    const currentMain = document.querySelector("header");
    const expectedMain = parser
      .parseFromString(expectedDom, "text/html")
      .querySelector("header");
    t.ok(!!currentMain);
    const dom1 = normalizeStructure(currentMain);
    const dom2 = normalizeStructure(expectedMain);
    t.deepEqual(dom1, dom2, "DOM structures should be equal");
    t.end();
  });
  test("testing the DOM structure of plasmo.com, with an invalid structure", (t) => {
    const parser = new DOMParser();
    const currentMain = document.querySelector("header");
    const expectedMain = parser
      .parseFromString(
        `
    <header>
      <div>I should not be a valid header!</div>
    </header>
    `,
        "text/html"
      )
      .querySelector("header");
    const dom1 = normalizeStructure(currentMain);
    const dom2 = normalizeStructure(expectedMain);
    t.deepEqual(
      dom1,
      dom2,
      "DOM structures should be equal - this should fail"
    );
    t.end();
  });
};
init();
</file>

<file path="with-client-tests/contents/main-world-tests.ts">
import Ajv from "ajv"
import type { PlasmoCSConfig } from "plasmo"
import expectedBlogRequest from "~assets/expected-blog.json"
import { getTestFunction } from "~contents-helpers/get-test-function"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"],
  run_at: "document_start",
  world: "MAIN"
}
const runBasicTests = () => {
  const test = null as any
  test("Some valid examples from the main world", (t) => {
    t.notOk(true == ![], "true == ![]")
    t.notOk(true == [], "true == []")
    t.ok(
      "b" + "a" + +"a" + "a" === "baNaNa",
      '"b" + "a" + +"a" + "a" === "baNaNa"'
    )
    t.notOk(Object.is(-0, 0), "Object.is(-0, 0)")
    t.ok(-0 === 0, "-0 === 0")
    t.end()
  })
  test("A test that should fail, for testing purposes", (t) => {
    t.isEqual(true, false, "true should equal false")
    t.end()
  })
}
const replaceFetch = () => {
  const nativeFetch = window.fetch
  window.fetch = (...args: any[]) =>
    new Promise<Response>((resolve, reject) => {
      nativeFetch(...(args as [RequestInfo, RequestInit]))
        .then((result) => {
          if (args[0].includes("blog.json")) {
            const test = getTestFunction()
            const resultClone = result.clone()
            test("testing the blog.json response", (t) => {
              t.plan(4)
              t.ok(result.ok, "result.ok should be true")
              t.ok(
                result?.headers
                  ?.get("content-type")
                  ?.includes("application/json"),
                "content-type should be application/json"
              )
              resultClone.json().then((res) => {
                const ajv = new Ajv({
                  allErrors: true
                })
                const validate = ajv.compile(expectedBlogRequest)
                const valid = validate(res)
                t.ok(valid, "json should match the expected schema")
                t.end()
              })
            })
            resolve(result)
          } else {
            resolve(result)
          }
        })
        .catch((err: any) => reject(err))
    })
}
runBasicTests()
replaceFetch()
</file>

<file path="with-client-tests/contents/relay.ts">
import { relayMessage } from "@plasmohq/messaging";
import type { PlasmoCSConfig } from "plasmo";
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"],
  run_at: "document_start",
};
relayMessage({
  name: "test-handler",
});
</file>

<file path="with-client-tests/contents-helpers/dom-structure.ts">
interface NormalizedStructure {
  tag: string;
  children: NormalizedStructure[];
}
export const normalizeStructure = (node: Element): NormalizedStructure => {
  const normalized: NormalizedStructure = {
    tag: node.tagName.toLowerCase(),
    children: [],
  };
  for (const childNode of Array.from(node.childNodes)) {
    if (childNode.nodeType === Node.ELEMENT_NODE) {
      normalized.children.push(normalizeStructure(childNode as Element));
    }
  }
  normalized.children.sort((a, b) => a.tag.localeCompare(b.tag));
  return normalized;
};
</file>

<file path="with-client-tests/contents-helpers/get-test-function.ts">
import tape from "tape"
import { sendToBackground, sendToBackgroundViaRelay } from "@plasmohq/messaging"
import type { TestRequest } from "~background/messages/test-handler"
export const getTestFunction = () => {
  const test = tape.createHarness()
  const s = test.createStream({
    objectMode: true
  })
  s.on("data", async (row) => {
    if ("error" in row) {
      console.error(row)
      row.error = {
        message: row.error.message,
        stack: row.error.stack
      }
      if (location.protocol !== "chrome-extension:") {
        await sendToBackgroundViaRelay<TestRequest>({
          name: "test-handler",
          body: {
            test: row
          }
        })
      } else {
        await sendToBackground<TestRequest>({
          name: "test-handler",
          body: {
            test: row
          }
        })
      }
    } else {
      console.log(row)
    }
  })
  return test
}
</file>

<file path="with-client-tests/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

out/
build/
dist/

# plasmo
.plasmo

# typescript
.tsbuildinfo
</file>

<file path="with-client-tests/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]",
  ],
};
</file>

<file path="with-client-tests/package.json">
{
  "name": "with-client-tests",
  "displayName": "With client tests",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "acorn221"
  ],
  "engines": {
    "npm": ">=7.0.0",
    "node": ">=16.0.0"
  },
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "@plasmohq/messaging": "workspace:*",
    "ajv": "8.12.0",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "tape": "5.7.2"
  },
  "devDependencies": {
    "@types/tape": "5.6.4",
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ],
    "web_accessible_resources": [
      {
        "resources": [
          "~assets/*/**"
        ],
        "matches": [
          "https://*/*"
        ]
      }
    ]
  }
}
</file>

<file path="with-client-tests/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Why you would want to use this example

This is an example which shows you how to run tests on the client side, using [Tape](https://github.com/ljharb/tape), which can be used monitor the DOM your extension interacts with or any changes to intercepted fetch requests amongst many other potential usecases, to let you know about any changes that might break your extension.

This mainly helps to solve the problem of gradual rollouts from sites which may slowly roll out changes, which may break your extension and you may not be aware of the changes or be able to reproduce them locally.

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-client-tests/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": ["node_modules"],
  "include": [".plasmo/index.d.ts", "./**/*.ts", "./**/*.tsx"],
  "compilerOptions": {
    "paths": {
      "~*": ["./*"]
    },
    "baseUrl": ".",
    "isolatedModules": true
  }
}
</file>

<file path="with-content-script/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

out/
build/
dist/

# plasmo
.plasmo

# typescript
.tsbuildinfo
</file>

<file path="with-content-script/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-content-script/content.ts">
import type { PlasmoCSConfig } from "plasmo"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}
window.addEventListener("load", () => {
  console.log(
    "You may find that having is not so pleasing a thing as wanting. This is not logical, but it is often true."
  )
  document.body.style.background = "pink"
})
</file>

<file path="with-content-script/package.json">
{
  "name": "with-content-script",
  "displayName": "With content script",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv"
  ],
  "engines": {
    "npm": ">=7.0.0",
    "node": ">=16.0.0"
  },
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-content-script/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-content-script/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-content-scripts-ui/contents/font.css">
@font-face {
  font-family: "Fascinate";
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: url(data-base64:~assets/Fascinate.woff2) format("woff2");
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA,
    U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215,
    U+FEFF, U+FFFD;
}
</file>

<file path="with-content-scripts-ui/contents/google-sidebar-base.css">
:root,
#plasmo-google-sidebar:host {
  --plasmo-google-sidebar-width: 420px;
}
body.plasmo-google-sidebar-show,
body.plasmo-google-sidebar-show * {
  max-width: calc(100vw - var(--plasmo-google-sidebar-width));
}
#plasmo-google-sidebar {
  position: fixed;
  z-index: 240;
  top: 0px;
  right: 0px;
}
</file>

<file path="with-content-scripts-ui/contents/google-sidebar.css">
#sidebar {
  position: absolute;
  background-color: #1b141d;
  width: var(--plasmo-google-sidebar-width);
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  transition: all 0.5s ease;
}
#sidebar.open {
  left: calc(var(--plasmo-google-sidebar-width) * -1);
}
#sidebar.closed {
  left: 0px;
}
#sidebar p {
  padding: 0 24px;
  font-weight: bold;
  text-align: center;
  font-size: 24px;
  font-family: sans-serif;
}
.sidebar-toggle {
  position: fixed;
  right: 4.7px;
  bottom: 47px;
}
</file>

<file path="with-content-scripts-ui/contents/google-sidebar.tsx">
import iconBase64 from "data-base64:~assets/icon.png"
import cssText from "data-text:~/contents/google-sidebar.css"
import type { PlasmoCSConfig } from "plasmo"
import { useEffect, useState } from "react"
import "./google-sidebar-base.css"
export const config: PlasmoCSConfig = {
  matches: ["https://www.google.com/*"]
}
export const getStyle = () => {
  const style = document.createElement("style")
  style.textContent = cssText
  return style
}
export const getShadowHostId = () => "plasmo-google-sidebar"
const GoogleSidebar = () => {
  const [isOpen, setIsOpen] = useState(true)
  useEffect(() => {
    document.body.classList.toggle("plasmo-google-sidebar-show", isOpen)
  }, [isOpen])
  return (
    <div id="sidebar" className={isOpen ? "open" : "closed"}>
      <button className="sidebar-toggle" onClick={() => setIsOpen(!isOpen)}>
        {isOpen ? "🟡 Close" : "🟣 Open"}
      </button>
      <img src={iconBase64} alt="Extension Icon" width={128} height={128} />
      <p>The Easiest Way to Build, Test, and Ship browser extensions</p>
    </div>
  )
}
export default GoogleSidebar
</file>

<file path="with-content-scripts-ui/contents/hello.ts">
export {}
console.log("HELLO")
</file>

<file path="with-content-scripts-ui/contents/plasmo-inline.tsx">
import type { PlasmoCSConfig, PlasmoGetInlineAnchor } from "plasmo"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}
export const getInlineAnchor: PlasmoGetInlineAnchor = () =>
  document.querySelector(`[href="/#pricing"]`)
export const getShadowHostId = () => "plasmo-inline-example-unique-id"
const PlasmoInline = () => {
  return (
    <div
      style={{
        borderRadius: 4,
        padding: 4,
        background: "pink"
      }}>
      CSUI INLINE
    </div>
  )
}
export default PlasmoInline
</file>

<file path="with-content-scripts-ui/contents/plasmo-overlay-anchor.tsx">
import type { PlasmoCSConfig, PlasmoGetOverlayAnchor } from "plasmo"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}
export const getOverlayAnchor: PlasmoGetOverlayAnchor = async () =>
  document.querySelector(`h1`)
const PlasmoPricingExtra = () => (
  <span
    style={{
      borderRadius: 4,
      background: "beige",
      padding: 4
    }}>
    CSUI OVERLAY ANCHOR
  </span>
)
export default PlasmoPricingExtra
</file>

<file path="with-content-scripts-ui/contents/plasmo-overlay-watch.tsx">
import type {
  PlasmoCSConfig,
  PlasmoGetOverlayAnchor,
  PlasmoWatchOverlayAnchor
} from "plasmo"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}
export const watchOverlayAnchor: PlasmoWatchOverlayAnchor = (
  updatePosition
) => {
  const interval = setInterval(() => {
    updatePosition()
  }, 420)
  return () => clearInterval(interval)
}
export const getOverlayAnchor: PlasmoGetOverlayAnchor = async () =>
  document.querySelector(`header > div > a[href="/"]`)
const PlasmoPricingExtra = () => (
  <span
    style={{
      borderRadius: 4,
      background: "violet",
      padding: 4,
      position: "absolute",
      top: 44
    }}>
    CSUI OVERLAY WATCH ANCHOR
  </span>
)
export default PlasmoPricingExtra
</file>

<file path="with-content-scripts-ui/contents/plasmo-overlay.css">
.hw-top {
  width: 100px;
  background: red;
  color: white;
  font-family: "Fascinate";
}
#plasmo-shadow-container {
  z-index: 10 !important;
  position: fixed !important;
}
#plasmo-overlay-0 {
  border: 8px solid aqua;
}
</file>

<file path="with-content-scripts-ui/contents/plasmo-overlay.tsx">
import cssText from "data-text:~/contents/plasmo-overlay.css"
import type { PlasmoCSConfig } from "plasmo"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"],
  css: ["font.css"]
}
export const getStyle = () => {
  const style = document.createElement("style")
  style.textContent = cssText
  return style
}
const PlasmoOverlay = () => {
  return (
    <span
      className="hw-top"
      style={{
        padding: 12
      }}>
      CSUI OVERLAY FIXED POSITION
    </span>
  )
}
export default PlasmoOverlay
</file>

<file path="with-content-scripts-ui/contents/plasmo-root-container.tsx">
import type {
  PlasmoCSConfig,
  PlasmoCSUIJSXContainer,
  PlasmoCSUIProps,
  PlasmoRender
} from "plasmo"
import type { FC } from "react"
import { createRoot } from "react-dom/client"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}
export const getRootContainer = () =>
  new Promise((resolve) => {
    const checkInterval = setInterval(() => {
      const rootContainerParent = document.querySelector(`[href="/docs"]`)
      if (rootContainerParent) {
        clearInterval(checkInterval)
        const rootContainer = document.createElement("div")
        rootContainerParent.appendChild(rootContainer)
        resolve(rootContainer)
      }
    }, 137)
  })
const PlasmoOverlay: FC<PlasmoCSUIProps> = () => {
  return (
    <span
      style={{
        borderRadius: 4,
        background: "yellow",
        padding: 4,
        position: "absolute",
        top: 0,
        left: 0,
        transform: "translateY(-24px) translateX(42px)"
      }}>
      CSUI ROOT CONTAINER
    </span>
  )
}
export const render: PlasmoRender<PlasmoCSUIJSXContainer> = async ({
  createRootContainer
}) => {
  const rootContainer = await createRootContainer()
  const root = createRoot(rootContainer)
  root.render(<PlasmoOverlay />)
}
export default PlasmoOverlay
</file>

<file path="with-content-scripts-ui/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-content-scripts-ui/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-content-scripts-ui/package.json">
{
  "name": "with-content-scripts-ui",
  "displayName": "With content scripts ui",
  "version": "0.0.1",
  "description": "This example demonstrates how to render a React component using content scripts",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv",
    "vinne"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ],
    "permissions": [
      "tabs"
    ]
  }
}
</file>

<file path="with-content-scripts-ui/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-content-scripts-ui/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-css-modules/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-css-modules/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-css-modules/content.tsx">
import styleText from "data-text:./style.module.css"
import type { PlasmoCSConfig } from "plasmo"
import * as style from "./style.module.css"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}
export const getStyle = () => {
  const style = document.createElement("style")
  style.textContent = styleText
  return style
}
const PlasmoOverlay = () => {
  return (
    <span
      className={style.header}
      style={{
        padding: 12
      }}>
      HELLO WORLD TOP
    </span>
  )
}
export default PlasmoOverlay
</file>

<file path="with-css-modules/package.json">
{
  "name": "with-css-modules",
  "displayName": "With css modules",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  },
  "contributors": [
    "lgvic"
  ]
}
</file>

<file path="with-css-modules/popup.tsx">
import { useState } from "react"
import * as style from "./style.module.css"
function IndexPopup() {
  const [data, setData] = useState("")
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16
      }}>
      <h2 className={style.header}>
        Welcome to your{" "}
        <a href="https://www.plasmo.com" target="_blank">
          Plasmo
        </a>{" "}
        Extension!
      </h2>
      <input onChange={(e) => setData(e.target.value)} value={data} />
      <a href="https://docs.plasmo.com" target="_blank">
        View Docs
      </a>
    </div>
  )
}
export default IndexPopup
</file>

<file path="with-css-modules/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-css-modules/style.module.css">
.header {
  color: red;
}
</file>

<file path="with-css-modules/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-declarative-net-request/rules/test.json">
[
    {
      "id" : 1,
      "priority": 1,
      "action" : {
        "type" : "block"
      },
      "condition" : {
        "urlFilter" : "*://example.com/*",
        "resourceTypes" : ["main_frame", "sub_frame", "stylesheet", "script", "image", "font", "object", "xmlhttprequest", "ping", "csp_report", "media", "websocket", "webtransport", "webbundle", "other"]
      }
    }
]
</file>

<file path="with-declarative-net-request/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo
.plasmo

# typescript
.tsbuildinfo
</file>

<file path="with-declarative-net-request/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-declarative-net-request/package.json">
{
  "name": "with-dnr",
  "displayName": "With declarative net request",
  "version": "0.0.1",
  "description": "Using DelcarativeNetRequest rules",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "afk",
    "louisgv"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ],
    "permissions": [
      "declarativeNetRequest"
    ],
    "declarative_net_request": {
      "rule_resources": [
        {
          "id": "ruleset_1",
          "enabled": true,
          "path": "~rules/test.json"
        }
      ]
    }
  }
}
</file>

<file path="with-declarative-net-request/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

For more about rules, see: https://developer.chrome.com/docs/extensions/reference/declarativeNetRequest/#rules

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/workflows#submit-your-extension) and you should be on your way for automated submission!
</file>

<file path="with-declarative-net-request/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-devtools/panels/font-picker/index.html">
<!DOCTYPE html>
<html>
  <head>
    <title>Font Picker</title>
    <meta charset="utf-8" />
  </head>
  <body>
    <div id="root"></div>
    <script src="url:./index.tsx" type="module"></script>
  </body>
</html>
</file>

<file path="with-devtools/panels/font-picker/index.tsx">
import { createRoot } from "react-dom/client"
const FontPicker = () => {
  return (
    <>
      <h2>Font Picker</h2>
      <p>HELLO WORLD</p>
    </>
  )
}
const root = createRoot(document.getElementById("root"))
root.render(<FontPicker />)
</file>

<file path="with-devtools/panels/font-properties/index.html">
<!DOCTYPE html>
<html>
  <head>
    <title>Font Properties</title>
    <meta charset="utf-8" />
  </head>
  <body>
    <div id="root"></div>
    <script src="url:./index.tsx" type="module"></script>
  </body>
</html>
</file>

<file path="with-devtools/panels/font-properties/index.tsx">
import { createRoot } from "react-dom/client"
const FontProperties = () => {
  return (
    <div>
      <h2>Font Properties</h2>
      <p>HI THERE</p>
    </div>
  )
}
const root = createRoot(document.getElementById("root"))
root.render(<FontProperties />)
</file>

<file path="with-devtools/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-devtools/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-devtools/devtools.tsx">
import fontPickerHTML from "url:./panels/font-picker/index.html"
import fontPropertiesHTML from "url:./panels/font-properties/index.html"
chrome.devtools.panels.create(
  "Font Picker",
  null,
  fontPickerHTML.split("/").pop()
)
chrome.devtools.panels.elements.createSidebarPane(
  "Font Properties",
  function (sidebar) {
    sidebar.setPage(fontPropertiesHTML.split("/").pop())
  }
)
function IndexDevtools() {
  return (
    <h2>
      Welcome to your <a href="https://www.plasmo.com">Plasmo</a> Extension!
    </h2>
  )
}
export default IndexDevtools
</file>

<file path="with-devtools/package.json">
{
  "name": "with-devtools",
  "displayName": "With devtools",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*",
      "file://*/*"
    ]
  }
}
</file>

<file path="with-devtools/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-devtools/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-emotion/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-emotion/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-emotion/components.tsx">
import styled from "@emotion/styled"
export const Container = styled.main`
  display: flex;
  flex-direction: column;
  padding: 1rem;
  margin: 0 auto;
  background: azure;
`
export const Link = styled.a`
  padding: 0.25rem;
  color: cornflowerblue;
`
</file>

<file path="with-emotion/content.tsx">
import createCache from "@emotion/cache"
import { CacheProvider } from "@emotion/react"
import { useState } from "react"
import { Container, Link } from "~components"
const styleElement = document.createElement("style")
const styleCache = createCache({
  key: "plasmo-emotion-cache",
  prepend: true,
  container: styleElement
})
export const getStyle = () => styleElement
function PlasmoOverlay() {
  const [data, setData] = useState("")
  return (
    <CacheProvider value={styleCache}>
      <Container>
        <h2>
          Welcome to your{" "}
          <Link href="https:
            Plasmo
          </Link>{" "}
          Extension!
        </h2>
        <input onChange={(e) => setData(e.target.value)} value={data} />
        <Link href="https://docs.plasmo.com" target="_blank">
          View Docs
        </Link>
      </Container>
    </CacheProvider>
  )
}
export default PlasmoOverlay
</file>

<file path="with-emotion/package.json">
{
  "name": "with-emotion",
  "displayName": "With emotion",
  "version": "0.0.1",
  "description": "Integrating Emotion styling solution with Plasmo.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "olhapi",
    "louisgv"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "@emotion/cache": "11.11.0",
    "@emotion/react": "11.11.3",
    "@emotion/styled": "11.11.0",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@babel/core": "7.23.7",
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-emotion/popup.tsx">
import { useState } from "react"
import { Container, Link } from "~components"
function IndexPopup() {
  const [data, setData] = useState("")
  return (
    <Container>
      <h2>
        Welcome to your{" "}
        <Link href="https:
          Plasmo
        </Link>{" "}
        Extension!
      </h2>
      <input onChange={(e) => setData(e.target.value)} value={data} />
      <Link href="https://docs.plasmo.com" target="_blank">
        View Docs
      </Link>
    </Container>
  )
}
export default IndexPopup
</file>

<file path="with-emotion/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-emotion/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-emotion-tailwindcss-antd/src/components/ButtonGroup/ButtonGroup.tsx">
import styled from "@emotion/styled"
import React, { cloneElement, useState } from "react"
import type { ButtonGroupProps, ButtonItemProps } from "./type"
const ButtonGroup: React.FC<ButtonGroupProps> = ({ children }) => {
  const [current, setCurrent] = useState(0)
  const childDisplayName = "ButtonItem"
  return (
    <StyledButtonGroup>
      {React.Children.map(
        children as React.ReactElement<ButtonItemProps>,
        (child, index) => {
          if (child && child.type["displayName"] === childDisplayName) {
            return cloneElement(child, {
              isSelect: current === index,
              onClick: () => {
                setCurrent(index)
              }
            })
          }
        }
      )}
    </StyledButtonGroup>
  )
}
const StyledButtonGroup = styled.div`
  position: relative;
  width: 302px;
  background: #fff;
  box-shadow:
    0 0 1px #00000014,
    1px 2px 14px 1px #73727826;
  border-radius: 8px;
  box-sizing: border-box;
  padding: 16px;
  display: flex;
  flex-direction: column;
  gap: 12px;
  z-index: 2147483647;
`
ButtonGroup.displayName = "ButtonGroup"
export default ButtonGroup
</file>

<file path="with-emotion-tailwindcss-antd/src/components/ButtonGroup/ButtonItem.tsx">
import styled from "@emotion/styled"
import React from "react"
import type { ButtonItemProps } from "./type"
const ButtonItem: React.FC<ButtonItemProps> = (props: ButtonItemProps) => {
  return (
    <StyledButtonItem $isSelect={props.isSelect} onClick={props.onClick}>
      <div className="title">{props.title}</div>
      <div className="desc">{props.desc}</div>
      <div className="icon">Default</div>
    </StyledButtonItem>
  )
}
const StyledButtonItem = styled.div<{ $isSelect: boolean }>`
  box-sizing: border-box;
  position: relative;
  padding: 12px;
  background: ${(props) => (props.$isSelect ? "#f8fcff" : "#ffffff")};
  border: ${(props) =>
    props.$isSelect ? "1px solid #4082ff8c" : "1px solid #e6eaf2"};
  border-radius: 6px;
  display: flex;
  flex-direction: column;
  gap: 6px;
  cursor: pointer;
  transition: 0.2s all ease-in;
  &:hover {
    border-color: #4082ff8c;
  }
  .title {
    font-size: 14px;
    font-weight: 700;
    line-height: 18px;
    color: #212b36;
  }
  .desc {
    font-size: 14px;
    line-height: 1.3;
    color: #595959;
  }
  .icon {
    position: absolute;
    top: 0;
    right: 0;
    height: 24px;
    padding: 0 10px;
    text-align: center;
    line-height: 24px;
    background: linear-gradient(112.58deg, #4082ff -5.16%, #454cff 105.31%);
    border-radius: 0 6px 0 12px;
    font-size: 12px;
    color: #fff;
    display: ${(props) => (props.$isSelect ? "block" : "none")};
  }
`
ButtonItem.displayName = "ButtonItem"
ButtonItem.defaultProps = {
  isSelect: false
}
export default ButtonItem
</file>

<file path="with-emotion-tailwindcss-antd/src/components/ButtonGroup/type.ts">
export type ButtonGroupProps = {
  children: React.ReactNode
}
export type ButtonItemProps = {
  isSelect: boolean
  title: string
  desc: string
  onClick?: () => void
}
</file>

<file path="with-emotion-tailwindcss-antd/src/contents/inject.tsx">
import type { PlasmoCSConfig } from "plasmo"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}
export const getRootContainer = () =>
  new Promise((resolve) => {
    const checkInterval = setInterval(() => {
      const id = "plasmo-inject"
      if (document.querySelector(`#${id}`)) {
        clearInterval(checkInterval)
        return
      }
      const root = document.querySelector(`[href="/#pricing"]`)
      const mountDiv = document.createElement("div")
      mountDiv.id = "plasmo-inject"
      root?.append(mountDiv)
      clearInterval(checkInterval)
      resolve(mountDiv)
    }, 137)
  })
const Inject = () => {
  return <></>
}
export default Inject
</file>

<file path="with-emotion-tailwindcss-antd/src/contents/plasmo.tsx">
import { StyleProvider } from "@ant-design/cssinjs"
import createCache from "@emotion/cache"
import { CacheProvider } from "@emotion/react"
import type { MenuProps } from "antd"
import { Button, ConfigProvider, Dropdown, message, Space, Tooltip } from "antd"
import cssText from "data-text:~style.css"
import type {
  PlasmoCSConfig,
  PlasmoCSUIProps,
  PlasmoGetInlineAnchor
} from "plasmo"
import ButtonGroup from "~components/ButtonGroup/ButtonGroup"
import ButtonItem from "~components/ButtonGroup/ButtonItem"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}
export const getInlineAnchor: PlasmoGetInlineAnchor = () =>
  document.querySelector("#plasmo-inject")
export const getShadowHostId = () => "plasmo-demo"
const styleElement = document.createElement("style")
const styleCache = createCache({
  key: "panda-content-style-cache",
  prepend: true,
  container: styleElement
})
export const getStyle = () => {
  styleElement.textContent = cssText
  return styleElement
}
const PlasmoOverlay = ({ anchor }: PlasmoCSUIProps) => {
  console.log("anchor: ", anchor.element.nextElementSibling?.shadowRoot)
  const shadowRoot = anchor.element.nextElementSibling?.shadowRoot
  const items: MenuProps["items"] = [
    {
      label: (
        <a
          target="_blank"
          rel="noopener noreferrer"
          href="https://www.antgroup.com">
          1st menu item
        </a>
      ),
      key: "0"
    },
    {
      label: (
        <a
          target="_blank"
          rel="noopener noreferrer"
          href="https://www.aliyun.com">
          2nd menu item
        </a>
      ),
      key: "1"
    },
    {
      type: "divider"
    },
    {
      label: "3rd menu item（disabled）",
      key: "3",
      disabled: true
    }
  ]
  const [messageApi, contextHolder] = message.useMessage()
  const success = () => {
    messageApi.open({
      type: "success",
      content: "This is a success message"
    })
  }
  return (
    <ConfigProvider getPopupContainer={() => shadowRoot as any}>
      <StyleProvider container={shadowRoot}>
        <CacheProvider value={styleCache}>
          <div
            style={{ background: "#fff", padding: "20px" }}
            className="container bg-white shadow-lg p-10 text-black"
            id="plasmo-demo-container">
            <div className="title text-black m-4">Styled-Components Demo</div>
            <div>
              <ButtonGroup>
                <ButtonItem
                  isSelect={true}
                  title={"What is your name"}
                  desc={"My name is Jack"}
                />
                <ButtonItem
                  isSelect={false}
                  title={"What is your name"}
                  desc={"My name is Mike"}
                />
              </ButtonGroup>
            </div>
            <div className="title text-black m-4">Antd Demo</div>
            <div>
              <Tooltip placement="top" title="Hello">
                <Button type="primary">Hover here</Button>
              </Tooltip>
            </div>
            <br />
            <div>
              <Dropdown menu={{ items }}>
                <a onClick={(e) => e.preventDefault()}>
                  <Space>Click here</Space>
                </a>
              </Dropdown>
            </div>
            <br />
            <div>
              {contextHolder}
              <Button type="primary" onClick={success}>
                Success
              </Button>
            </div>
          </div>
        </CacheProvider>
      </StyleProvider>
    </ConfigProvider>
  )
}
export default PlasmoOverlay
</file>

<file path="with-emotion-tailwindcss-antd/src/style.css">
#plasmo-shadow-container {
    z-index: 10 !important;
}
</file>

<file path="with-emotion-tailwindcss-antd/src/tailwindCSS.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
#plasmo-shadow-container {
    z-index: 10 !important;
}
</file>

<file path="with-emotion-tailwindcss-antd/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-emotion-tailwindcss-antd/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-emotion-tailwindcss-antd/package.json">
{
  "name": "with-emotion-tailwindcss-antd",
  "displayName": "With emotion tailwindcss antd",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "@ant-design/cssinjs": "1.18.2",
    "@emotion/cache": "11.11.0",
    "@emotion/react": "11.11.3",
    "@emotion/styled": "11.11.0",
    "antd": "5.13.2",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "autoprefixer": "10.4.17",
    "postcss": "8.4.33",
    "prettier": "3.2.4",
    "tailwindcss": "3.4.1",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ],
    "permissions": [
      "tabs"
    ]
  }
}
</file>

<file path="with-emotion-tailwindcss-antd/postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="with-emotion-tailwindcss-antd/README.md">
## Preview

https://github.com/code4you2021/examples/assets/83153991/8dda16a0-8f79-4939-8333-bec1d4d36741

This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).


## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-emotion-tailwindcss-antd/tailwind.config.js">
module.exports = {
  content: ["./src/**/*.{js,ts,jsx,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
}
</file>

<file path="with-emotion-tailwindcss-antd/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
, "src/contents/inject.tsx"  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./src/*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-env/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo
.plasmo

# typescript
.tsbuildinfo
</file>

<file path="with-env/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-env/background.ts">
export {}
if (process.env.NODE_ENV === "development") {
  console.log("This is a development build")
}
if (process.env.NODE_ENV === "production") {
  console.log("This is a production build")
}
console.log("SITE_URL:", process.env.PLASMO_PUBLIC_SITE_URL)
</file>

<file path="with-env/content.ts">
import type { PlasmoCSConfig } from "plasmo"
export const config: PlasmoCSConfig = {
  matches: ["$PLASMO_PUBLIC_SITE_URL/"]
}
if (process.env.NODE_ENV === "development") {
  console.log("This is a development build")
}
if (process.env.NODE_ENV === "production") {
  console.log("This is a production build")
}
console.log(
  "Shield Frequency - SHHHH:",
  process.env.PLASMO_PUBLIC_SHIELD_FREQUENCY
)
console.log(
  "ENV vars without the PLASMO_PUBLIC_ prefix are not injected and so will be undefined:",
  process.env.CODE
)
</file>

<file path="with-env/example.env">
PLASMO_PUBLIC_SHIP_NAME=ncc-1701
PLASMO_PUBLIC_SHIELD_FREQUENCY=147
PLASMO_PUBLIC_SITE_URL=https://www.plasmo.com

CODE=PLASMO-GO-030 # Undefined in extension because it does not start with PLASMO_PUBLIC_
</file>

<file path="with-env/package.json">
{
  "name": "with-env",
  "displayName": "With env",
  "version": "0.0.1",
  "description": "This example demonstrates a variety of ways to use environment variables with plasmo",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "homepage_url": "$PLASMO_PUBLIC_SITE_URL",
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-env/popup.tsx">
import testDataURL from "raw-env:./test.json"
import { useEffect, useState } from "react"
function IndexPopup() {
  const [data, setData] = useState(null)
  useEffect(() => {
    fetch(testDataURL)
      .then((res) => res.json())
      .then((data) => setData(data))
  })
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16
      }}>
      <a target="_blank" href="https://docs.plasmo.com/framework/env">
        with-env example extension
      </a>
      <p>Ship name: {process.env.PLASMO_PUBLIC_SHIP_NAME}</p>
      <p>Private data: {process.env.INFOPATH}</p>
      <p>{process.env.NODE_ENV}</p>
      <p>TEST DATA: {data?.url}</p>
    </div>
  )
}
export default IndexPopup
</file>

<file path="with-env/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-env/test.json">
{
  "url": "$PLASMO_PUBLIC_SITE_URL"
}
</file>

<file path="with-env/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": ["node_modules"],
  "include": [".plasmo/index.d.ts", "./**/*.ts", "./**/*.tsx"],
  "compilerOptions": {
    "paths": {
      "~*": ["./*"]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-firebase-auth/firebase/hook.ts">
import {
  browserLocalPersistence,
  GoogleAuthProvider,
  onAuthStateChanged,
  setPersistence,
  signInWithCredential,
  User
} from "firebase/auth"
import { getFirestore } from "firebase/firestore"
import { useEffect, useMemo, useState } from "react"
import { app, auth } from "~firebase"
setPersistence(auth, browserLocalPersistence)
export const useFirebase = () => {
  const [isLoading, setIsLoading] = useState(false)
  const [user, setUser] = useState<User>(null)
  const firestore = useMemo(() => (user ? getFirestore(app) : null), [user])
  const onLogout = async () => {
    setIsLoading(true)
    if (user) {
      await auth.signOut()
    }
  }
  const onLogin = () => {
    setIsLoading(true)
    chrome.identity.getAuthToken({ interactive: true }, async function (token) {
      if (chrome.runtime.lastError || !token) {
        console.error(chrome.runtime.lastError.message)
        setIsLoading(false)
        return
      }
      if (token) {
        const credential = GoogleAuthProvider.credential(null, token)
        try {
          await signInWithCredential(auth, credential)
        } catch (e) {
          console.error("Could not log in. ", e)
        }
      }
    })
  }
  useEffect(() => {
    onAuthStateChanged(auth, (user) => {
      setIsLoading(false)
      setUser(user)
    })
  }, [])
  return {
    isLoading,
    user,
    firestore,
    onLogin,
    onLogout
  }
}
</file>

<file path="with-firebase-auth/firebase/index.ts">
import { initializeApp } from "firebase/app"
import { getAuth } from "firebase/auth"
const firebaseConfig = {
  apiKey: process.env.PLASMO_PUBLIC_FIREBASE_PUBLIC_API_KEY,
  authDomain: process.env.PLASMO_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.PLASMO_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.PLASMO_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.PLASMO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.PLASMO_PUBLIC_FIREBASE_APP_ID,
  measurementId: process.env.PLASMO_PUBLIC_FIREBASE_MEASUREMENT_ID
}
export const app = initializeApp(firebaseConfig)
export const auth = getAuth(app)
</file>

<file path="with-firebase-auth/firebase/use-firestore-doc.ts">
import {
  doc,
  DocumentData,
  DocumentSnapshot,
  getDoc,
  onSnapshot,
  setDoc
} from "firebase/firestore"
import { useCallback, useEffect, useMemo, useState } from "react"
import { useFirebase } from "~firebase/hook"
export const useFirestoreDoc = <T = any>(docPath: string) => {
  const { firestore } = useFirebase()
  const [data, _setData] = useState<T>()
  const [isReady, setIsReady] = useState(false)
  const docRef = useMemo(() => {
    if (!firestore || !docPath) {
      return null
    }
    return doc(firestore, docPath)
  }, [firestore, docPath])
  useEffect(() => {
    if (!docRef) {
      _setData(undefined)
      return
    }
    async function init(_snapshot = null as DocumentSnapshot<DocumentData>) {
      try {
        const snapshot = _snapshot || (await getDoc(docRef))
        _setData(snapshot.data() as T)
        setIsReady(true)
      } catch (error) {
        console.error(error)
      }
    }
    const unsubscribe = onSnapshot(docRef, (snapshot) => {
      init(snapshot)
    })
    return () => {
      unsubscribe()
    }
  }, [docRef])
  const setData = useCallback(
    (_data: T) => {
      if (!docRef) {
        return
      }
      return setDoc(docRef, _data)
    },
    [docRef]
  )
  return {
    data,
    setData,
    isReady
  }
}
</file>

<file path="with-firebase-auth/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo
.plasmo

# typescript
.tsbuildinfo
</file>

<file path="with-firebase-auth/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-firebase-auth/example.env">
CRX_PUBLIC_KEY=

PLASMO_PUBLIC_FIREBASE_CLIENT_ID=

PLASMO_PUBLIC_FIREBASE_PUBLIC_API_KEY=
PLASMO_PUBLIC_FIREBASE_AUTH_DOMAIN=
PLASMO_PUBLIC_FIREBASE_PROJECT_ID=
PLASMO_PUBLIC_FIREBASE_STORAGE_BUCKET=
PLASMO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=
PLASMO_PUBLIC_FIREBASE_APP_ID=
PLASMO_PUBLIC_FIREBASE_MEASUREMENT_ID=
</file>

<file path="with-firebase-auth/newtab.tsx">
import { useFirebase } from "~firebase/hook"
import { useFirestoreDoc } from "~firebase/use-firestore-doc"
export default function IndexNewtab() {
  const { user, isLoading, onLogin, onLogout } = useFirebase()
  const { data: enterpriseData, setData } = useFirestoreDoc<{
    serial: string
  }>("starships/enterprise")
  const { data: crewData, setData: setCrewData } = useFirestoreDoc<{
    name: string
  }>(user?.uid && `crews/${user.uid}`)
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16,
        gap: 4
      }}>
      <h1>
        Welcome to your <a href="https://www.plasmo.com">Plasmo</a> Extension!
      </h1>
      {!user ? (
        <button onClick={() => onLogin()}>Log in</button>
      ) : (
        <button onClick={() => onLogout()}>Log out</button>
      )}
      <div>
        {isLoading ? "Loading..." : ""}
        {!!user ? (
          <div>
            Welcome to Plasmo, {user.displayName} your email address is{" "}
            {user.email}
          </div>
        ) : (
          ""
        )}
      </div>
      <h2>Ship serial number:</h2>
      <input
        value={enterpriseData?.serial || ""}
        onChange={(e) =>
          setData({
            serial: e.target.value
          })
        }
      />
      <br />
      <h3>Crew name:</h3>
      <input
        value={crewData?.name || ""}
        onChange={(e) =>
          setCrewData({
            name: e.target.value
          })
        }
      />
      <footer>Crafted by @PlasmoHQ</footer>
    </div>
  )
}
</file>

<file path="with-firebase-auth/package.json">
{
  "name": "with-firebase",
  "displayName": "Firebase Plasmo example",
  "version": "0.0.1",
  "description": "Showcasing how easy it is to have auth with Plasmo.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "coldsauce"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "firebase": "10.7.2",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "key": "$CRX_PUBLIC_KEY",
    "host_permissions": [
      "https://*/*"
    ],
    "permissions": [
      "identity"
    ],
    "oauth2": {
      "client_id": "$PLASMO_PUBLIC_FIREBASE_CLIENT_ID",
      "scopes": [
        "https://www.googleapis.com/auth/userinfo.email",
        "https://www.googleapis.com/auth/userinfo.profile"
      ]
    }
  }
}
</file>

<file path="with-firebase-auth/popup.tsx">
import { useFirebase } from "~firebase/hook"
export default function IndexPopup() {
  const { user, isLoading, onLogin, onLogout } = useFirebase()
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16,
        width: "300px"
      }}>
      <h1>
        Welcome to your <a href="https://www.plasmo.com">Plasmo</a> Extension!
      </h1>
      {!user ? (
        <button onClick={() => onLogin()}>Log in</button>
      ) : (
        <button onClick={() => onLogout()}>Log out</button>
      )}
      <div>
        {isLoading ? "Loading..." : ""}
        {!!user ? (
          <div>
            Welcome to Plasmo, {user.displayName} your email address is{" "}
            {user.email}
          </div>
        ) : (
          ""
        )}
      </div>
      <footer>Crafted by @PlasmoHQ</footer>
    </div>
  )
}
</file>

<file path="with-firebase-auth/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-firebase-auth/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-firebase-fcm/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-firebase-fcm/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-firebase-fcm/background.ts">
export {}
function tokenRegistered(registration_id) {
  console.log("Registered: ", registration_id)
  if (chrome.runtime.lastError) {
    console.log("failed")
    return
  }
}
chrome.gcm.register(["<SENDER ID HERE>"], tokenRegistered)
chrome.gcm.onMessage.addListener((message) => {
  console.log("message", message)
})
</file>

<file path="with-firebase-fcm/package.json">
{
  "name": "with-firebase-fcm",
  "displayName": "With firebase fcm",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "coldsauce"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "@plasmohq/storage": "workspace:*",
    "firebase": "10.7.2",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ],
    "permissions": [
      "tabs",
      "gcm"
    ]
  }
}
</file>

<file path="with-firebase-fcm/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-firebase-fcm/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-google-analytics/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-google-analytics/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-google-analytics/example.env.local">
PLASMO_PUBLIC_GTAG_ID=
</file>

<file path="with-google-analytics/index.d.ts">
declare namespace NodeJS {
  interface ProcessEnv {
    PLASMO_PUBLIC_GTAG_ID?: string
  }
}
interface Window {
  dataLayer: Array
  gtag: (a: string, b: any, c?: any) => void
}
</file>

<file path="with-google-analytics/package.json">
{
  "name": "with-google-analytics",
  "displayName": "With google analytics",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://ssl.google-analytics.com",
      "https://*/*"
    ]
  }
}
</file>

<file path="with-google-analytics/popup.tsx">
import "https://www.googletagmanager.com/gtag/js?id=$PLASMO_PUBLIC_GTAG_ID"
import { useEffect, useState } from "react"
function IndexPopup() {
  const [data, setData] = useState("")
  useEffect(() => {
    window.dataLayer = window.dataLayer || []
    window.gtag = function gtag() {
      window.dataLayer.push(arguments) // eslint-disable-line
    }
    window.gtag("js", new Date())
    window.gtag("config", process.env.PLASMO_PUBLIC_GTAG_ID, {
      page_path: "/popup",
      debug_mode: true
    })
    window.gtag("event", "login", {
      method: "TEST"
    })
  }, [])
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16
      }}>
      <h1>
        Welcome to your <a href="https://www.plasmo.com">Plasmo</a> Extension!
      </h1>
      <input onChange={(e) => setData(e.target.value)} value={data} />
    </div>
  )
}
export default IndexPopup
</file>

<file path="with-google-analytics/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-google-analytics/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "lib": [
      "WebWorker",
      "dom",
      "WebWorker.ImportScripts"
    ],
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-google-analytics-measurement/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-google-analytics-measurement/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-google-analytics-measurement/background.ts">
import { Storage } from "@plasmohq/storage"
import { AnalyticsEvent } from "./utils"
chrome.runtime.onInstalled.addListener(async (details) => {
  if (details.reason == "install") {
    const clientId = self.crypto.randomUUID()
    const storage = new Storage({
      area: "sync"
    })
    await storage.set("clientId", clientId)
    const platform = await chrome.runtime.getPlatformInfo()
    await AnalyticsEvent([
      {
        name: "new_install",
        params: {
          operating_system: platform.os
        }
      }
    ])
  }
})
</file>

<file path="with-google-analytics-measurement/example.env.local">
# Looks something like G-S41BHQWBA1
PLASMO_PUBLIC_GTAG_ID=

# Looks something like WbAPlQnvBa-SPDXsj3_dvL
# https://developer.chrome.com/docs/extensions/mv3/tut_analytics/ google seem to say this is fine to be public?
PLASMO_PUBLIC_SECRET_API_KEY=
</file>

<file path="with-google-analytics-measurement/package.json">
{
  "name": "with-google-analytics-measurement",
  "displayName": "With google analytics measurement protocol",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv",
    "acorn221"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "@plasmohq/storage": "workspace:*",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://www.google-analytics.com/*",
      "https://*/*"
    ]
  }
}
</file>

<file path="with-google-analytics-measurement/popup.tsx">
import { useEffect, useState } from "react"
import { AnalyticsEvent } from "./utils"
function IndexPopup() {
  const [data, setData] = useState("")
  useEffect(() => {
    AnalyticsEvent([
      {
        name: "page_view",
        params: {
          page_title: "popup"
        }
      }
    ])
  }, [])
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16,
        minWidth: "250px"
      }}>
      <h1>
        Welcome to your <a href="https://www.plasmo.com">Plasmo</a> Extension!
      </h1>
      <input onChange={(e) => setData(e.target.value)} value={data} />
      <button
        onClick={() =>
          AnalyticsEvent([
            {
              name: "button_click",
              params: {
                method: "TEST",
                data
              }
            }
          ])
        }>
        Click me
      </button>
    </div>
  )
}
export default IndexPopup
</file>

<file path="with-google-analytics-measurement/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-google-analytics-measurement/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "lib": [
      "WebWorker",
      "dom",
      "WebWorker.ImportScripts"
    ],
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-google-analytics-measurement/utils.ts">
import { Storage } from "@plasmohq/storage"
if (!process.env.PLASMO_PUBLIC_GTAG_ID) {
  throw new Error("PLASMO_PUBLIC_GTAG_ID environment variable not set.")
}
if (!process.env.PLASMO_PUBLIC_SECRET_API_KEY) {
  throw new Error("PLASMO_PUBLIC_SECRET_API_KEY environment variable not set.")
}
const GA_ENDPOINT = "https://www.google-analytics.com/mp/collect"
const gtagId = process.env.PLASMO_PUBLIC_GTAG_ID
const secretApiKey = process.env.PLASMO_PUBLIC_SECRET_API_KEY
type CollectEventPayload = {
  name: string
  params?: any
}
export const AnalyticsEvent = async (events: CollectEventPayload[]) => {
  const storage = new Storage({
    area: "sync"
  })
  let clientId = await storage.get("clientId")
  if (!clientId) {
    clientId = self.crypto.randomUUID()
    await storage.set("clientId", clientId)
  }
  const fetched = await fetch(
    `${GA_ENDPOINT}?measurement_id=${gtagId}&api_secret=${secretApiKey}`,
    {
      method: "POST",
      body: JSON.stringify({
        client_id: clientId,
        events
      })
    }
  )
  return fetched
}
</file>

<file path="with-inbox-sdk/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-inbox-sdk/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-inbox-sdk/background.ts">
export * from "@inboxsdk/core/background"
</file>

<file path="with-inbox-sdk/content.ts">
import * as InboxSDK from "@inboxsdk/core"
import type { PlasmoCSConfig } from "plasmo"
export const config: PlasmoCSConfig = {
  matches: ["https://mail.google.com/*"],
  run_at: "document_end"
}
async function main() {
  const inboxSdk = await InboxSDK.load(
    2,
    process.env.PLASMO_PUBLIC_INBOX_SDK_APP_ID,
    null
  )
  inboxSdk.Compose.registerComposeViewHandler((composeView) => {
    composeView.addButton({
      title: "My Nifty Button!",
      iconUrl: "https://plasmo.com/logo.png",
      onClick(event) {
        event.composeView.insertHTMLIntoBodyAtCursor("Hello World!")
      }
    })
  })
}
main()
</file>

<file path="with-inbox-sdk/example.env">
PLASMO_PUBLIC_INBOX_SDK_APP_ID=
</file>

<file path="with-inbox-sdk/package.json">
{
  "name": "with-inbox-sdk",
  "displayName": "With inbox sdk",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "@inboxsdk/core": "2.1.26",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/inboxsdk": "2.0.14",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "kefir": "3.8.8",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ],
    "permissions": [
      "scripting"
    ],
    "web_accessible_resources": [
      {
        "resources": [
          "@inboxsdk/core/pageWorld.js"
        ],
        "matches": [
          "https://mail.google.com/*",
          "https://inbox.google.com/*"
        ]
      }
    ]
  },
  "contributors": [
    "lgvic",
    "yashwadhia"
  ]
}
</file>

<file path="with-inbox-sdk/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-inbox-sdk/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-jest/contents/hello.tsx">
const Contents = () => {
  return <div>Hello</div>
}
export default Contents
</file>

<file path="with-jest/contents/index.ts">
export const createGoogleSearch = () =>
  chrome.tabs.create({
    url: "https://www.google.com/search?q=%s"
  })
</file>

<file path="with-jest/tests/contents/hello.test.tsx">
import { describe, expect, it } from "@jest/globals"
import { render } from "@testing-library/react"
import HelloContent from "~contents/hello"
describe("test contents/hello", () => {
  it("should render", () => {
    expect(render(<HelloContent />).getByText("Hello")).toBeTruthy()
  })
})
</file>

<file path="with-jest/tests/contents/index.test.ts">
import { describe, expect, it } from "@jest/globals"
import { createGoogleSearch } from "~contents"
describe("test contents/index", () => {
  it("should have called a webextension API", () => {
    createGoogleSearch()
    expect(chrome.tabs.create).toHaveBeenCalledWith({
      url: "https://www.google.com/search?q=%s"
    })
  })
  it("should have called a webextension API three times", () => {
    createGoogleSearch()
    createGoogleSearch()
    expect(chrome.tabs.create).toHaveBeenCalledTimes(3)
  })
})
</file>

<file path="with-jest/tests/README.md">
# Test suite
</file>

<file path="with-jest/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-jest/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-jest/jest.config.mjs">
import { createRequire } from "module"
import { pathsToModuleNameMapper } from "ts-jest"

const require = createRequire(import.meta.url)
const tsconfig = require("./tsconfig.json")

/**
 * @type {import('@jest/types').Config.InitialOptions}
 */

const config = {
  setupFiles: ["jest-webextension-mock"],
  extensionsToTreatAsEsm: [".ts", ".tsx"],
  testRegex: ["^.+\\.test.tsx?$"],
  moduleNameMapper: pathsToModuleNameMapper(tsconfig.compilerOptions.paths, {
    prefix: "<rootDir>/"
  }),
  testEnvironment: "jsdom",
  transform: {
    "^.+.tsx?$": ["ts-jest", {}],
  },
}

export default config
</file>

<file path="with-jest/package.json">
{
  "name": "with-jest",
  "displayName": "With jest",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "coldsauce"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "test": "jest"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@jest/globals": "29.7.0",
    "@jest/types": "29.6.3",
    "@testing-library/react": "14.1.2",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "jest": "29.7.0",
    "jest-environment-jsdom": "29.7.0",
    "jest-webextension-mock": "3.8.9",
    "prettier": "3.2.4",
    "ts-jest": "29.1.1",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ],
    "permissions": [
      "tabs"
    ]
  }
}
</file>

<file path="with-jest/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-jest/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": ".",
    "verbatimModuleSyntax": false,
    "jsx": "react-jsx"
  }
}
</file>

<file path="with-jotai/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-jotai/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-jotai/counter.tsx">
import { atom, useAtom } from "jotai"
const counterAtom = atom<number>(0)
const CounterView = () => {
  const [counter, setCounter] = useAtom(counterAtom)
  const onIncrement = (): void => {
    setCounter((value: number): number => value + 1)
  }
  const onDecrement = (): void => {
    setCounter((value: number): number => value - 1)
  }
  return (
    <div>
      <div>Current count: {counter}</div>
      <button onClick={onIncrement}>Increment counter</button>
      <button onClick={onDecrement}>Decrement counter</button>
    </div>
  )
}
export default CounterView
</file>

<file path="with-jotai/package.json">
{
  "name": "with-jotai",
  "displayName": "With jotai",
  "version": "0.0.1",
  "description": "Plasmo extension which uses jotai library for state management",
  "author": "yashwadhia",
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "jotai": "2.6.2",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-jotai/popup.tsx">
import { Provider } from "jotai"
import CounterView from "~counter"
function IndexPopup() {
  return (
    <Provider>
      <CounterView />
    </Provider>
  )
}
export default IndexPopup
</file>

<file path="with-jotai/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-jotai/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-locales-i18n/locales/en/messages.json">
{
  "extensionName": {
    "message": "with-locales-i18n-en",
    "description": "Name of the extension."
  },
  "extensionDescription": {
    "message": "Example using locales + i18n!",
    "description": "Description of the extension."
  },
  "popup": {
    "message": "Logic is the beginning of wisdom, not the end. - $PLASMO_PUBLIC_QUOTE_AUTHOR",
    "description": "Popup message."
  }
}
</file>

<file path="with-locales-i18n/locales/vi/messages.json">
{
  "extensionName": {
    "message": "with-locales-i18n-vi",
    "description": "Name of the extension."
  },
  "extensionDescription": {
    "message": "Ví dụ dùng locales + i18n!",
    "description": "Description of the extension."
  },
  "popup": {
    "message": "Lý luận là khởi đầu của trí tuệ, không phải là kết thúc.  - $PLASMO_PUBLIC_QUOTE_AUTHOR",
    "description": "Popup message."
  }
}
</file>

<file path="with-locales-i18n/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-locales-i18n/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-locales-i18n/example.env">
PLASMO_PUBLIC_QUOTE_AUTHOR=Spock
</file>

<file path="with-locales-i18n/package.json">
{
  "name": "with-locales-i18n",
  "displayName": "With locales i18n",
  "version": "0.0.1",
  "description": "__MSG_extensionDescription__",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "coldsauce"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "name": "__MSG_extensionName__",
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-locales-i18n/popup.tsx">
import { useState } from "react"
function IndexPopup() {
  const [data, setData] = useState("")
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16
      }}>
      <h1>
        Welcome to your <a href="https://www.plasmo.com">Plasmo</a> Extension!
      </h1>
      <h2>{chrome.i18n.getMessage("popup")}</h2>
      <input onChange={(e) => setData(e.target.value)} value={data} />
    </div>
  )
}
export default IndexPopup
</file>

<file path="with-locales-i18n/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-locales-i18n/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-main-world/background/index.ts">
import windowChanger from "./injected-helper"
const inject = async (tabId: number) => {
  chrome.scripting.executeScript(
    {
      target: {
        tabId
      },
      world: "MAIN",
      func: windowChanger
    },
    () => {
      console.log("Background script got callback after injection")
    }
  )
}
chrome.tabs.onActivated.addListener((e) => {
  inject(e.tabId)
})
</file>

<file path="with-main-world/background/injected-helper.ts">
export default function windowChanger() {
  const anotherFunc = (): number => {
    return 42
  }
  window.hello = {
    world: "from injected content script",
    coolNumber: anotherFunc()
  }
  console.log(document.getElementsByTagName("html"))
}
</file>

<file path="with-main-world/contents/plasmo-main-ui.tsx">
import type { PlasmoCSConfig } from "plasmo"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"],
  world: "MAIN"
}
export default function PlasmoMainUI() {
  return (
    <div
      style={{
        padding: 8,
        background: "purple",
        color: "white"
      }}>
      <h1>{`Message: ${window.mainMessage}`}</h1>
    </div>
  )
}
</file>

<file path="with-main-world/contents/plasmo-main.ts">
import type { PlasmoCSConfig } from "plasmo"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"],
  world: "MAIN",
  run_at: "document_start"
}
window.mainMessage = "Sometimes a feeling is all we humans have to go on."
</file>

<file path="with-main-world/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-main-world/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-main-world/index.d.ts">
interface Window {
  hello: {
    world: string
    coolNumber: number
  }
  mainMessage: string
}
</file>

<file path="with-main-world/package.json">
{
  "name": "with-main-world",
  "displayName": "With main world script injection",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "coldsauce"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-main-world/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-main-world/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-mantine/contents/multiple.tsx">
import { Button } from "@mantine/core"
import mantineCssText from "data-text:@mantine/core/styles.css"
import mantineOverrideCssText from "data-text:~styles/mantine-override.css"
import type {
  PlasmoCSConfig,
  PlasmoCSUIProps,
  PlasmoGetInlineAnchorList,
  PlasmoGetStyle
} from "plasmo"
import type { FC } from "react"
import { ThemeProvider } from "~theme"
import "@mantine/core/styles.css"
import "~styles/mantine-override.css"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}
export const getStyle: PlasmoGetStyle = () => {
  const style = document.createElement("style")
  style.textContent = mantineCssText + mantineOverrideCssText
  return style
}
export const getInlineAnchorList: PlasmoGetInlineAnchorList = async () =>
  document.querySelectorAll(`button`)
const PlasmoInline: FC<PlasmoCSUIProps> = ({ anchor }) => {
  return (
    <ThemeProvider>
      <Button component="a" href="https://docs.plasmo.com" target="_blank">
        View Docs
      </Button>
    </ThemeProvider>
  )
}
export default PlasmoInline
</file>

<file path="with-mantine/contents/overlay.tsx">
import { Anchor, Button, Input, Stack, Text } from "@mantine/core"
import mantineCssText from "data-text:@mantine/core/styles.css"
import mantineOverrideCssText from "data-text:~styles/mantine-override.css"
import type { PlasmoCSConfig, PlasmoGetStyle } from "plasmo"
import { useState } from "react"
import { ThemeProvider } from "~theme"
import "@mantine/core/styles.css"
import "~styles/mantine-override.css"
import { setMantineColorScheme } from "~utils"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}
export const getStyle: PlasmoGetStyle = () => {
  const style = document.createElement("style")
  style.textContent = mantineCssText + mantineOverrideCssText
  return style
}
function PlasmoOverlay() {
  const [data, setData] = useState("")
  setMantineColorScheme("light")
  return (
    <ThemeProvider>
      <Stack miw={240} bg="white" p="lg">
        <Text fw="bold" size="xl">
          Welcome to your{" "}
          <Anchor href="https://www.plasmo.com" target="_blank">
            Plasmo
          </Anchor>{" "}
          Extension!
        </Text>
        <Input onChange={(e) => setData(e.target.value)} value={data} />
        <Button component="a" href="https://docs.plasmo.com" target="_blank">
          View Docs
        </Button>
      </Stack>
    </ThemeProvider>
  )
}
export default PlasmoOverlay
</file>

<file path="with-mantine/styles/mantine-override.css">
:host {
  height: 100%;
  margin: 0;
  color-scheme: var(--mantine-color-scheme);
  font-family: var(--mantine-font-family);
  font-size: var(--mantine-font-size-md);
  line-height: var(--mantine-line-height);
  background-color: var(--mantine-color-body);
  color: var(--mantine-color-text);
  -webkit-font-smoothing: var(--mantine-webkit-font-smoothing);
  -moz-osx-font-smoothing: var(--mantine-moz-font-smoothing);
}
</file>

<file path="with-mantine/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-mantine/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-mantine/package.json">
{
  "name": "with-mantine",
  "displayName": "With Mantine",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "crashmax-dev",
    "louisgv",
    "HappyGentle"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "@mantine/core": "7.4.2",
    "@mantine/hooks": "7.4.2",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@babel/core": "7.23.7",
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "postcss": "8.4.33",
    "postcss-preset-mantine": "1.12.3",
    "postcss-simple-vars": "7.0.1",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-mantine/popup.tsx">
import { Anchor, Button, Input, Stack, Text } from "@mantine/core"
import { useState } from "react"
import "@mantine/core/styles.css"
import { ThemeProvider } from "~theme"
function IndexPopup() {
  const [data, setData] = useState("")
  return (
    <ThemeProvider>
      <Stack miw={240} p="lg">
        <Text fw="bold" size="xl">
          Welcome to your{" "}
          <Anchor href="https://www.plasmo.com" target="_blank">
            Plasmo
          </Anchor>{" "}
          Extension!
        </Text>
        <Input onChange={(e) => setData(e.target.value)} value={data} />
        <Button component="a" href="https://docs.plasmo.com" target="_blank">
          View Docs
        </Button>
      </Stack>
    </ThemeProvider>
  )
}
export default IndexPopup
</file>

<file path="with-mantine/postcss.config.cjs">
module.exports = {
  plugins: {
    "postcss-preset-mantine": {},
    "postcss-simple-vars": {
      variables: {
        "mantine-breakpoint-xs": "36em",
        "mantine-breakpoint-sm": "48em",
        "mantine-breakpoint-md": "62em",
        "mantine-breakpoint-lg": "75em",
        "mantine-breakpoint-xl": "88em"
      }
    }
  }
}
</file>

<file path="with-mantine/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-mantine/theme.tsx">
import { createTheme, MantineProvider } from "@mantine/core"
const theme = createTheme({})
export const ThemeProvider = ({ children }) => {
  return (
    <MantineProvider
      cssVariablesSelector=":host"
      theme={theme}>
      {children}
    </MantineProvider>
  )
}
</file>

<file path="with-mantine/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-mantine/utils.ts">
import type { MantineColorScheme } from "@mantine/core"
function getPlasmoShadowRoot() {
  return document.querySelector("plasmo-csui")?.shadowRoot
}
export function getPlasmoShadowContainer() {
  return getPlasmoShadowRoot()?.querySelector(
    "#plasmo-shadow-container"
  ) as HTMLElement
}
export function injectCssText(cssText: string) {
  const plasmoCsui = getPlasmoShadowRoot()
  const style = document.createElement("style")
  style.textContent = cssText
  plasmoCsui.appendChild(style)
}
export function setMantineColorScheme(colorScheme: MantineColorScheme) {
  getPlasmoShadowContainer()?.setAttribute(
    "data-mantine-color-scheme",
    colorScheme
  )
}
</file>

<file path="with-many-content-scripts/contents/nested/index.tsx">
import type { PlasmoCSConfig } from "plasmo"
import { quote } from "~core/quote"
export const config: PlasmoCSConfig = {
  matches: ["https://itero.plasmo.com/*"]
}
export default function IteroPopup() {
  return <div style={{ background: "white" }}>{quote}</div>
}
</file>

<file path="with-many-content-scripts/contents/all-urls.ts">
import { quote } from "~core/quote"
window.addEventListener("DOMContentLoaded", () => {
  console.log(quote)
})
</file>

<file path="with-many-content-scripts/contents/plasmo.ts">
import type { PlasmoCSConfig } from "plasmo"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}
window.addEventListener("load", () => {
  document.body.style.background = "pink"
})
</file>

<file path="with-many-content-scripts/contents/vulcan.ts">
import type { PlasmoCSConfig } from "plasmo"
import { quote } from "~core/quote"
export const config: PlasmoCSConfig = {
  matches: ["https://vulcan.plasmo.com/*", "https://www.nowarpls.org/*"]
}
window.addEventListener("load", () => {
  alert(quote)
})
</file>

<file path="with-many-content-scripts/core/quote.ts">
export const quote =
  "Life and death are seldom logical. But attaining a desired goal always is."
</file>

<file path="with-many-content-scripts/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

out/
build/
dist/

# plasmo
.plasmo

# typescript
.tsbuildinfo
</file>

<file path="with-many-content-scripts/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-many-content-scripts/package.json">
{
  "name": "with-many-content-scripts",
  "displayName": "With many content scripts",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-many-content-scripts/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-many-content-scripts/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": ["node_modules"],
  "include": [".plasmo/index.d.ts", "./**/*.ts", "./**/*.tsx"],
  "compilerOptions": {
    "paths": {
      "~*": ["./*"]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-many-targets/popup/index.brave.tsx">
function BraveIndexPopup() {
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16
      }}>
      <h2>
        Welcome to your{" "}
        <a href="https://www.plasmo.com" target="_blank">
          Plasmo
        </a>{" "}
        Extension!
      </h2>
      THIS IS BRAVE POPUP
      <a href="https://docs.plasmo.com" target="_blank">
        View Docs
      </a>
    </div>
  )
}
export default BraveIndexPopup
</file>

<file path="with-many-targets/popup/index.firefox.tsx">
function FirefoxIndexPopup() {
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        background: "azure",
        padding: 16
      }}>
      <h2>
        Welcome to your{" "}
        <a href="https://www.plasmo.com" target="_blank">
          Plasmo
        </a>{" "}
        Extension!
      </h2>
      THIS IS FIREFOX POPUP
      <a href="https://docs.plasmo.com" target="_blank">
        View Docs
      </a>
    </div>
  )
}
export default FirefoxIndexPopup
</file>

<file path="with-many-targets/popup/index.tsx">
function IndexPopup() {
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16
      }}>
      <h2>
        Welcome to your{" "}
        <a href="https://www.plasmo.com" target="_blank">
          Plasmo
        </a>{" "}
        Extension!
      </h2>
      THIS IS BASE POPUP
      <a href="https://docs.plasmo.com" target="_blank">
        View Docs
      </a>
    </div>
  )
}
export default IndexPopup
</file>

<file path="with-many-targets/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-many-targets/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-many-targets/package.json">
{
  "name": "with-many-targets",
  "displayName": "With many targets",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "scripts": {
    "dev": "plasmo dev",
    "dev:firefox": "plasmo dev --target=firefox-mv2",
    "dev:brave": "plasmo dev --target=brave-mv3",
    "build": "run-s build:*",
    "build:chrome": "plasmo build",
    "build:firefox": "plasmo build --target=firefox-mv2",
    "build:brave": "plasmo build --target=brave-mv3"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@plasmohq/rps": "workspace:*",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  },
  "contributors": [
    "lgvic"
  ]
}
</file>

<file path="with-many-targets/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-many-targets/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-mellowtel/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

out/
build/
dist/

# plasmo
.plasmo

# typescript
.tsbuildinfo
</file>

<file path="with-mellowtel/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-mellowtel/background.ts">
import Mellowtel from "mellowtel"
let mellowtel
;(async () => {
  mellowtel = new Mellowtel(process.env.PLASMO_PUBLIC_MELLOWTEL)
  await mellowtel.initBackground()
})()
chrome.runtime.onInstalled.addListener(async function (details) {
  console.log("Extension Installed or Updated", details)
  await mellowtel.generateAndOpenOptInLink()
})
</file>

<file path="with-mellowtel/content.ts">
import Mellowtel from "mellowtel"
import type { PlasmoCSConfig } from "plasmo"
let mellowtel
export const config: PlasmoCSConfig = {
  matches: ["<all_urls>"],
  all_frames: true,
  run_at: "document_start"
}
const start = async () => {
  mellowtel = new Mellowtel(process.env.PLASMO_PUBLIC_MELLOWTEL)
  const resp = await mellowtel.initContentScript()
  console.log("TEST", resp, mellowtel)
}
start()
</file>

<file path="with-mellowtel/example.env.local">
PLASMO_PUBLIC_MELLOWTEL=
</file>

<file path="with-mellowtel/package.json">
{
  "name": "with-mellowtel",
  "displayName": "With mellowtel",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"  
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "mellowtel": "1.3.5",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "permissions": [
      "activeTab",
      "identity",
      "storage",
      "tabs",
      "declarativeNetRequest"
    ],
    "host_permissions": [
      "<all_urls>"
    ]
  }
}
</file>

<file path="with-mellowtel/popup.tsx">
import Mellowtel from "mellowtel"
const Popup: React.FC = () => {
  const handleMellowtelSettings = async () => {
    const mellowtel = new Mellowtel(process.env.PLASMO_PUBLIC_MELLOWTEL)
    const link = await mellowtel.generateSettingsLink()
    chrome.tabs.create({ url: link })
  }
  return (
    <div>
          <button
            onClick={handleMellowtelSettings}>
            Change Mellowtel Settings
          </button>
    </div>
  )
}
export default Popup
</file>

<file path="with-mellowtel/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-mellowtel/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-messaging/background/messages/math/add.ts">
import type { PlasmoMessaging } from "@plasmohq/messaging"
import { getPort } from "@plasmohq/messaging/background"
const handler: PlasmoMessaging.MessageHandler = async (req, res) => {
  const { a, b } = req.body
  const port = getPort("mail")
  port.postMessage("ADDING TWO NUMBERS EH?")
  res.send(a + b + 1)
}
export default handler
</file>

<file path="with-messaging/background/messages/get-manifest.ts">
import type { PlasmoMessaging } from "@plasmohq/messaging"
const handler: PlasmoMessaging.MessageHandler = async (_, res) => {
  const manifest = chrome.runtime.getManifest()
  res.send(manifest)
}
export default handler
</file>

<file path="with-messaging/background/messages/hash-tx.ts">
import type { PlasmoMessaging } from "@plasmohq/messaging"
const HIDDEN_NUMBER = 541
export type RequestBody = {
  input: number
}
export type RequestResponse = number
const handler: PlasmoMessaging.MessageHandler<
  RequestBody,
  RequestResponse
> = async (req, res) => {
  const { input } = req.body
  res.send(input * HIDDEN_NUMBER)
}
export default handler
</file>

<file path="with-messaging/background/messages/open-extension.ts">
import type { PlasmoMessaging } from "@plasmohq/messaging"
const handler: PlasmoMessaging.MessageHandler = async (req, res) => {
  chrome.windows.create(
    {
      url: chrome.runtime.getURL("popup.html"),
      type: "popup",
      width: 400,
      height: 600
    },
    (window) => {
      console.log(`Popup window created with ID ${window.id}`)
    }
  )
  const message = "Hello from the background script!"
  res.send({
    message
  })
}
export default handler
</file>

<file path="with-messaging/background/ports/mail.ts">
import type { PlasmoMessaging } from "@plasmohq/messaging"
const SECRET = "LABARRE"
const handler: PlasmoMessaging.PortHandler = async (req, res) => {
  const { password } = req.body
  if (password !== SECRET) {
    res.send("(HINT: HOMETOWN)")
  } else {
    res.send("CAPTAIN")
  }
}
export default handler
</file>

<file path="with-messaging/background/index.ts">
import "@plasmohq/messaging/background"
import { startHub } from "@plasmohq/messaging/pub-sub"
console.log(`BGSW - Starting Hub`)
startHub()
</file>

<file path="with-messaging/contents/any-url-query-text.tsx">
import type { PlasmoCSConfig } from "plasmo"
import { useMessage } from "@plasmohq/messaging/hook"
export const config: PlasmoCSConfig = {
  all_frames: true
}
const QueryTextAnywhere = () => {
  const { data } = useMessage<string, string>(async (req, res) => {
    res.send(document.querySelector(req.body).textContent)
  })
  return (
    <div
      style={{
        padding: 8,
        background: "#333",
        color: "red"
      }}>
      Querying Selector for: {data}
    </div>
  )
}
export default QueryTextAnywhere
</file>

<file path="with-messaging/contents/client-hub-main-world.ts">
import type { PlasmoCSConfig } from "plasmo"
import { connectToHub } from "@plasmohq/messaging/pub-sub"
export const config: PlasmoCSConfig = {
  world: "MAIN"
}
window.clientHub = {
  description:
    "A webpage accessible clientHub which can conenct to BGSW hub and send messages",
  connect: () => {
    if (!process.env.PLASMO_PUBLIC_EXTENSION_ID) {
      throw new Error(
        "Please update PLASMO_PUBLIC_EXTENSION_ID in .env file with your Extension Id"
      )
    }
    window.clientHub.port = connectToHub(process.env.PLASMO_PUBLIC_EXTENSION_ID)
    window.clientHub.port.onMessage.addListener((m) => {
      console.log("Message received from BGSW HUB:", m)
    })
  },
  send: (message: string) => {
    window.clientHub.port.postMessage({ message })
  }
}
</file>

<file path="with-messaging/contents/handle-main-world.ts">
import type { PlasmoCSConfig } from "plasmo"
import { sendToBackground } from "@plasmohq/messaging"
import { relay } from "@plasmohq/messaging/relay"
export const config: PlasmoCSConfig = {
  matches: ["<all_urls>"]
}
relay(
  {
    name: "open-extension" as const
  },
  async (req) => {
    const openResult = await sendToBackground(req)
    return openResult
  }
)
</file>

<file path="with-messaging/contents/index.ts">
import type { PlasmoCSConfig } from "plasmo"
import { relayMessage, sendToBackground } from "@plasmohq/messaging"
import { relay } from "@plasmohq/messaging/relay"
export const config: PlasmoCSConfig = {
  matches: ["http://localhost:1947/*"]
}
relayMessage({
  name: "get-manifest"
})
relay(
  {
    name: "math/add" as const
  },
  async (req) => {
    const { a, b } = req.body
    const minusResult = a - b - 9
    document.getElementById(
      "subtract-result"
    ).innerText = `${a} minus ${b} is ${minusResult}`
    const addResult = await sendToBackground(req)
    return addResult
  }
)
</file>

<file path="with-messaging/contents/main-world.ts">
import type { PlasmoCSConfig } from "plasmo"
import { sendToBackgroundViaRelay } from "@plasmohq/messaging"
export const config: PlasmoCSConfig = {
  matches: ["<all_urls>"],
  run_at: "document_start",
  world: "MAIN"
}
window.relay = {
  description: "Message from content script in main world",
  tryRelay: async () => {
    let result = await sendToBackgroundViaRelay({
      name: "open-extension"
    })
    return result
  }
}
</file>

<file path="with-messaging/contents/porter.tsx">
import type { PlasmoCSConfig } from "plasmo"
import { useState } from "react"
import { usePort } from "@plasmohq/messaging/hook"
export const config: PlasmoCSConfig = {
  matches: ["http://localhost:1947/*"]
}
export default function Porter() {
  const port = usePort("mail")
  const [password, setPassword] = useState("")
  return (
    <div
      style={{
        position: "fixed",
        padding: "8px",
        right: 0
      }}>
      <input
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      <button
        onClick={() => {
          port.send({
            password
          })
        }}>
        Test Password
      </button>
      <p>HELLO {port.data}</p>
    </div>
  )
}
</file>

<file path="with-messaging/pages/client-hub-a.tsx">
import { useEffect } from "react"
function IndexPage() {
  useEffect(() => window.clientHub.connect(), [])
  return (
    <div style={{ marginTop: "50px" }}>
      Tab A
      <ul>
        <li>
          <a href="/client-hub-a" target="_blank">
            Open Tab A
          </a>
        </li>
        <li>
          <a href="/client-hub-b" target="_blank">
            Open Tab B
          </a>
        </li>
      </ul>
      <div>
        <button
          onClick={async () => {
            window.clientHub.send("This is a message from Tab A")
          }}>
          Send Message From A
        </button>
      </div>
    </div>
  )
}
export default IndexPage
</file>

<file path="with-messaging/pages/client-hub-b.tsx">
import { useEffect } from "react"
function IndexPage() {
  useEffect(() => window.clientHub.connect(), [])
  return (
    <div style={{ marginTop: "50px" }}>
      Tab B
      <ul>
        <li>
          <a href="/client-hub-a" target="_blank">
            Open Tab A
          </a>
        </li>
        <li>
          <a href="/client-hub-b" target="_blank">
            Open Tab B
          </a>
        </li>
      </ul>
      <div>
        <button
          onClick={async () => {
            window.clientHub.send("This is a message from Tab B")
          }}>
          Send Message From B
        </button>
      </div>
    </div>
  )
}
export default IndexPage
</file>

<file path="with-messaging/pages/index.tsx">
import { useState } from "react"
import { sendToBackgroundViaRelay } from "@plasmohq/messaging"
function IndexPage() {
  const [manifestData, setManifestData] = useState()
  const [a, setA] = useState(0)
  const [b, setB] = useState(4)
  const [addResult, setAddResult] = useState(0)
  return (
    <div>
      <div>
        <input
          type="number"
          value={a}
          onChange={(e) => setA(Number(e.target.valueAsNumber))}
        />
        {" + "}
        <input
          type="number"
          value={b}
          onChange={(e) => setB(e.target.valueAsNumber)}
        />{" "}
        <button
          onClick={async () => {
            const resp = await sendToBackgroundViaRelay({
              name: "math/add",
              body: {
                a,
                b
              }
            })
            setAddResult(resp)
          }}>
          =
        </button>{" "}
        {addResult}
        {" | "}
        <span id="subtract-result" />
      </div>
      <button
        onClick={async () => {
          const resp = await sendToBackgroundViaRelay({
            name: "get-manifest"
          })
          setManifestData(resp)
        }}>
        Retrieve Extension Manifest
      </button>
      <pre>{JSON.stringify(manifestData, null, 2)}</pre>
    </div>
  )
}
export default IndexPage
</file>

<file path="with-messaging/tabs/delta.tsx">
import { usePort } from "@plasmohq/messaging/hook"
type RequestBody = {
  hello: string
}
type ResponseBody = {
  message: string
}
function DeltaTab() {
  const mailPort = usePort<RequestBody, ResponseBody>("mail")
  return (
    <div>
      {mailPort.data?.message}
      <button
        onClick={async () => {
          mailPort.send({
            hello: "world"
          })
        }}>
        Send Port
      </button>
    </div>
  )
}
export default DeltaTab
</file>

<file path="with-messaging/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-messaging/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-messaging/example.env">
# Set this to the Extension Id found in your browsers Extension Manager
PLASMO_PUBLIC_EXTENSION_ID=
</file>

<file path="with-messaging/next-env.d.ts">

</file>

<file path="with-messaging/package.json">
{
  "name": "with-messaging",
  "displayName": "With messaging",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "scripts": {
    "start": "next start",
    "dev": "run-p dev:*",
    "dev:plasmo": "plasmo dev",
    "dev:next": "next dev --port 1947",
    "build": "run-s build:*",
    "build:plasmo": "plasmo build",
    "build:next": "next build",
    "package": "plasmo package"
  },
  "dependencies": {
    "@plasmohq/messaging": "workspace:*",
    "next": "14.1.0",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@plasmohq/rps": "workspace:*",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "permissions": [
      "activeTab",
      "tabs"
    ],
    "host_permissions": [
      "https://*/*",
      "http://*/*"
    ],
    "externally_connectable": {
      "matches": [
        "*://*.localhost.com/*"
      ]
    }
  },
  "contributors": [
    "louis <louis@plasmo.com>",
    "udayan"
  ]
}
</file>

<file path="with-messaging/popup.tsx">
import { useState } from "react"
import { sendToBackground, sendToContentScript } from "@plasmohq/messaging"
function IndexPopup() {
  const [txHash, setTxHash] = useState(undefined)
  const [txInput, setTxInput] = useState(0)
  const [selector, setSelector] = useState("#itero")
  const [csResponse, setCsData] = useState("")
  return (
    <div>
      <input
        type="number"
        value={txInput}
        onChange={(e) => setTxInput(e.target.valueAsNumber)}
      />
      <button
        onClick={async () => {
          const resp = await sendToBackground({
            name: "hash-tx",
            body: {
              input: txInput
            }
          })
          setTxHash(resp)
        }}>
        Hash TX
      </button>
      <p>TX HASH: {txHash}</p>
      <hr />
      <input value={selector} onChange={(e) => setSelector(e.target.value)} />
      <button
        onClick={async () => {
          const csResponse = await sendToContentScript({
            name: "query-selector-text",
            body: selector
          })
          setCsData(csResponse)
        }}>
        Query Text on Web Page
      </button>
      <br />
      <label>Text Data:</label>
      <p>{csResponse}</p>
      <footer>Crafted by @PlasmoHQ</footer>
    </div>
  )
}
export default IndexPopup
</file>

<file path="with-messaging/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

### Note for pub-sub example

To test the externally connectable API (pub-sub):

1. Configure a second-level domain via your host file. This example uses the config below:

```
localhost localhost.com
```

2. Add an `.env` file containing the extension ID (see `example.env`)

3. Follow the development server step
4. Navigate to `https://localhost.com:1947/client-hub-a` to test out the API.

### Development server

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-messaging/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": ["node_modules"],
  "include": [
    ".plasmo/index.d.ts",
    "next-env.d.ts",
    "window.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": ["./*"]
    },
    "baseUrl": ".",
    "isolatedModules": true
  }
}
</file>

<file path="with-messaging/window.d.ts">
interface Window {
  relay: {
    description: string
    tryRelay: () => Promise<string>
  }
  clientHub: {
    description: string
    connect: () => void
    send: (message: string) => void
    port?: chrome.runtime.Port
  }
}
</file>

<file path="with-microsoft-clarity/resources/clarity.js">
!function(){"use strict";var t=Object.freeze({__proto__:null,get queue(){return Wa},get start(){return qa},get stop(){return Xa},get track(){return La}}),e=Object.freeze({__proto__:null,get clone(){return sr},get compute(){return lr},get data(){return er},get keys(){return nr},get reset(){return dr},get start(){return ur},get stop(){return hr},get trigger(){return cr},get update(){return fr}}),n=Object.freeze({__proto__:null,get check(){return yr},get compute(){return kr},get data(){return tr},get start(){return br},get stop(){return Er},get trigger(){return wr}}),a=Object.freeze({__proto__:null,get compute(){return Mr},get data(){return Or},get log(){return Tr},get reset(){return _r},get start(){return xr},get stop(){return Nr},get updates(){return Sr}}),r=Object.freeze({__proto__:null,get callbacks(){return Cr},get clear(){return Yr},get consent(){return Hr},get data(){return Ir},get electron(){return Dr},get id(){return zr},get metadata(){return Rr},get save(){return qr},get shortid(){return Pr},get start(){return Ar},get stop(){return Lr}}),i=Object.freeze({__proto__:null,get data(){return Gr},get envelope(){return $r},get start(){return Zr},get stop(){return Qr}}),o={projectId:null,delay:1e3,lean:!1,track:!0,content:!0,drop:[],mask:[],unmask:[],regions:[],cookies:[],fraud:!0,checksum:[],report:null,upload:null,fallback:null,upgrade:null,action:null,dob:null};function u(t){return window.Zone&&"__symbol__"in window.Zone?window.Zone.__symbol__(t):t}var c=0;function s(t){void 0===t&&(t=null);var e=t&&t.timeStamp>0?t.timeStamp:performance.now();return Math.max(Math.round(e-c),0)}var l="0.7.20";function d(t,e){void 0===e&&(e=null);for(var n,a=5381,r=a,i=0;i<t.length;i+=2){if(a=(a<<5)+a^t.charCodeAt(i),i+1<t.length)r=(r<<5)+r^t.charCodeAt(i+1)}return n=Math.abs(a+11579*r),(e?n%Math.pow(2,e):n).toString(36)}var f=/\S/gi,h=!0,p=null,v=null,g=null;function m(t,e,n,a){if(void 0===a&&(a=!1),t)switch(n){case 0:return t;case 1:switch(e){case"*T":case"value":case"placeholder":case"click":return function(t){var e=-1,n=0,a=!1,r=!1,i=!1,o=null;O();for(var u=0;u<t.length;u++){var c=t.charCodeAt(u);if(a=a||c>=48&&c<=57,r=r||64===c,i=9===c||10===c||13===c||32===c,0===u||u===t.length-1||i){if(a||r){null===o&&(o=t.split(""));var s=t.substring(e+1,i?u:u+1);s=h&&null!==g?s.match(g)?s:k(s,"▪","▫"):w(s),o.splice(e+1-n,s.length,s),n+=s.length-1}i&&(a=!1,r=!1,e=u)}}return o?o.join(""):t}(t);case"input":case"change":return E(t)}return t;case 2:case 3:switch(e){case"*T":case"data-":return a?y(t):w(t);case"src":case"srcset":case"title":case"alt":return 3===n?"":t;case"value":case"click":case"input":case"change":return E(t);case"placeholder":return w(t)}break;case 4:switch(e){case"*T":case"data-":return a?y(t):w(t);case"value":case"input":case"click":case"change":return Array(5).join("•");case"checksum":return""}break;case 5:switch(e){case"*T":case"data-":return k(t,"▪","▫");case"value":case"input":case"click":case"change":return Array(5).join("•");case"checksum":case"src":case"srcset":case"alt":case"title":return""}}return t}function b(t,e){if(void 0===e&&(e=!1),e)return"".concat("https:
</file>

<file path="with-microsoft-clarity/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

out/
build/
dist/

# plasmo
.plasmo

# typescript
.tsbuildinfo
</file>

<file path="with-microsoft-clarity/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-microsoft-clarity/background.ts">
import { injectClarity } from "~injectClarity"
</file>

<file path="with-microsoft-clarity/injectClarity.ts">
type InjectClarityType = {
  url: string
  config: {
    projectId: string
    upload: string
    expire: number
    cookies: string[]
    track: boolean
    lean: boolean
    content: boolean
    dob: number
  }
  clarityKey: string
}
export const injectClarity = (data: InjectClarityType) => {
  const { url, config, clarityKey } = data
  window[clarityKey] = function () {
    ;(window[clarityKey].q = window[clarityKey].q || []).push([
      window,
      document,
      clarityKey,
      "script",
      config.projectId
    ])
  }
  const sync = (): void => {
    const image = new Image()
    image.src = "https://c.clarity.ms/c.gif"
  }
  if (document.readyState === "complete") {
    sync()
  } else {
    window.addEventListener("load", sync)
  }
  if (window[clarityKey].v || window[clarityKey].t) {
    return window[clarityKey]("event", clarityKey, `dup.${config.projectId}`)
  }
  window[clarityKey].t = true
  const scriptElement = document.createElement("script")
  scriptElement.setAttribute("type", "text/javascript")
  scriptElement.setAttribute("async", "true")
  scriptElement.setAttribute("src", url)
  scriptElement.setAttribute("id", "ms_clarity")
  const head = document.head
  head.parentNode.insertBefore(scriptElement, head)
  scriptElement.onload = (): void => {
    window[clarityKey]("start", config)
    window[clarityKey].q.unshift(window[clarityKey].q.pop())
    window[clarityKey]("set", "C_IS", "0")
  }
  return undefined
}
</file>

<file path="with-microsoft-clarity/package.json">
{
  "name": "with-microsoft-clarity",
  "displayName": "With Microsoft Clarity",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "acorn221"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "@plasmohq/messaging": "workspace:*",
    "buffer": "6.0.3",
    "events": "3.3.0",
    "plasmo": "workspace:*",
    "process": "0.11.10",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "stream-browserify": "3.0.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://plasmo.com/*"
    ],
    "web_accessible_resources": [
      {
        "resources": [
          "resources/clarity.js"
        ],
        "matches": [
          "<all_urls>"
        ]
      }
    ],
    "permissions": [
      "activeTab",
      "scripting"
    ]
  }
}
</file>

<file path="with-microsoft-clarity/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

Firstly, go to [Microsoft Clarity](https://clarity.microsoft.com/) and create a project.

Then get your tracking code that looks like this:
```
<script type="text/javascript">
    (function(c,l,a,r,i,t,y){
        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};
        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;
        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);
    })(window, document, "clarity", "script", "**The ID that you need to copy**");
</script>
```

After you have your project ID as shown above, go to `https://www.clarity.ms/tag/**The ID that you need to copy**` and copy the "config" object at the end of the script there, it should look something like this:
```
!function(c,l,a,r,i,t,y){function sync(){(new Image).src="https://c.clarity.ms/c.gif"}"complete"==document.readyState?sync():window.addEventListener("load",sync);if(a[c].v||a[c].t)return a[c]("event",c,"dup."+i.projectId);a[c].t=!0,(t=l.createElement(r)).async=!0,t.src="https://www.clarity.ms/s/0.7.20/clarity.js",(y=l.getElementsByTagName(r)[0]).parentNode.insertBefore(t,y),a[c]("start",i),a[c].q.unshift(a[c].q.pop()),a[c]("set","C_IS","0")}("clarity",document,window,"script",{"projectId":"***Project ID***","upload":"https://t.clarity.ms/collect","expire":365,"cookies":["_uetmsclkid","_uetvid"],"track":true,"lean":false,"content":false,"dob":1442});
```

After you have gone to that page, copy the object at the end that looks like 
```
{"projectId":"***Project ID***","upload":"https://t.clarity.ms/collect","expire":365,"cookies":["_uetmsclkid","_uetvid"],"track":true,"lean":false,"content":false,"dob":1442}
```

Then replace `config` in `background.ts` with that object.

And finally, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Note: Adblockers like Ublock Origin and others block Microsoft Clarity. To confirm you've set everything up properly, follow this guide [here](https://learn.microsoft.com/en-us/clarity/setup-and-installation/clarity-setup#verify-your-installation) and look out for POST requests to `https://www.clarity.ms/collect`.

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-microsoft-clarity/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-mui/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-mui/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-mui/content.tsx">
import createCache from "@emotion/cache"
import { CacheProvider } from "@emotion/react"
import Button from "@mui/material/Button"
import Input from "@mui/material/Input"
import Link from "@mui/material/Link"
import Stack from "@mui/material/Stack"
import Typography from "@mui/material/Typography"
import { useState } from "react"
const styleElement = document.createElement("style")
const styleCache = createCache({
  key: "plasmo-mui-cache",
  prepend: true,
  container: styleElement
})
export const getStyle = () => styleElement
function PlasmoOverlay() {
  const [data, setData] = useState("")
  return (
    <CacheProvider value={styleCache}>
      <Stack minWidth={240} bgcolor={"white"} padding={2}>
        <Typography variant="h6">
          Welcome to your{" "}
          <Link href="https://www.plasmo.com" target="_blank">
            Plasmo
          </Link>{" "}
          Extension!
        </Typography>
        <Input onChange={(e) => setData(e.target.value)} value={data} />
        <Button href="https://docs.plasmo.com" target="_blank">
          View Docs
        </Button>
      </Stack>
    </CacheProvider>
  )
}
export default PlasmoOverlay
</file>

<file path="with-mui/package.json">
{
  "name": "with-mui",
  "displayName": "With mui",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "@emotion/cache": "11.11.0",
    "@emotion/react": "11.11.3",
    "@emotion/styled": "11.11.0",
    "@mui/material": "5.15.5",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@babel/core": "7.23.7",
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  },
  "contributors": [
    "lgvic"
  ]
}
</file>

<file path="with-mui/popup.tsx">
import Button from "@mui/material/Button"
import Input from "@mui/material/Input"
import Link from "@mui/material/Link"
import Stack from "@mui/material/Stack"
import Typography from "@mui/material/Typography"
import { useState } from "react"
function IndexPopup() {
  const [data, setData] = useState("")
  return (
    <Stack minWidth={240}>
      <Typography variant="h6">
        Welcome to your{" "}
        <Link href="https://www.plasmo.com" target="_blank">
          Plasmo
        </Link>{" "}
        Extension!
      </Typography>
      <Input onChange={(e) => setData(e.target.value)} value={data} />
      <Button href="https://docs.plasmo.com" target="_blank">
        View Docs
      </Button>
    </Stack>
  )
}
export default IndexPopup
</file>

<file path="with-mui/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-mui/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-multiple-tailwindcss/contents/index.tsx">
import cssText from "data-text:~/contents/style.css"
import type { PlasmoCSConfig } from "plasmo"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}
export const getStyle = () => {
  const style = document.createElement("style")
  style.textContent = cssText
  return style
}
const PlasmoContent = () => {
  return (
    <div className="fixed inset-5">
      <button className="py-2.5 px-5 mr-2 mb-2 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-full border border-gray-200 hover:bg-gray-100 hover:text-blue-700">
        HELLO WORLD
      </button>
    </div>
  )
}
export default PlasmoContent
</file>

<file path="with-multiple-tailwindcss/contents/style.css">
@config "./tailwind.config.js";
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path="with-multiple-tailwindcss/contents/tailwind.config.js">
module.exports = {
  content: ["./contents/*.{ts,tsx}"],
  plugins: []
}
</file>

<file path="with-multiple-tailwindcss/popup/index.tsx">
import { useState } from "react"
import "./style.css"
function IndexPopup() {
  const [data, setData] = useState("")
  return (
    <div className="flex flex-col p-8">
      <h2>
        Welcome to your{" "}
        <a
          className="text-blue-500 underline"
          href="https://www.plasmo.com"
          target="_blank">
          Plasmo
        </a>{" "}
        Extension!
      </h2>
      <input onChange={(e) => setData(e.target.value)} value={data} />
      <a
        className="text-red-500 font-bold underline"
        href="https://docs.plasmo.com"
        target="_blank">
        View Docs
      </a>
    </div>
  )
}
export default IndexPopup
</file>

<file path="with-multiple-tailwindcss/popup/style.css">
@config "./tailwind.config.js";
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path="with-multiple-tailwindcss/popup/tailwind.config.js">
module.exports = {
  content: ["./popup/*.{ts,tsx}"]
}
</file>

<file path="with-multiple-tailwindcss/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-multiple-tailwindcss/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-multiple-tailwindcss/package.json">
{
  "name": "with-multiple-tailwindcss",
  "displayName": "With multiple tailwindcss",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "tailwindcss": "3.4.1"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "autoprefixer": "10.4.17",
    "postcss": "8.4.33",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  },
  "contributors": [
    "elbasan"
  ]
}
</file>

<file path="with-multiple-tailwindcss/postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {}
  }
}
</file>

<file path="with-multiple-tailwindcss/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!

## Notes

This example makes use of the [postcss-multiple-tailwind](https://github.com/robbevp/postcss-multiple-tailwind) plugin to generate separate styles for content-script and popup.
</file>

<file path="with-multiple-tailwindcss/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-newtab/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-newtab/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-newtab/newtab.tsx">
import { useState } from "react"
function IndexNewtab() {
  const [data, setData] = useState("")
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16
      }}>
      <h1>
        Welcome to your <a href="https://www.plasmo.com">Plasmo</a> Extension!
      </h1>
      <input onChange={(e) => setData(e.target.value)} value={data} />
    </div>
  )
}
export default IndexNewtab
</file>

<file path="with-newtab/package.json">
{
  "name": "with-newtab",
  "displayName": "With newtab",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ],
    "permissions": [
      "tabs"
    ]
  }
}
</file>

<file path="with-newtab/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-newtab/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-nextjs/src/components/main.tsx">
import { useState } from "react"
export function Main({ name = "Extension" }) {
  const [data, setData] = useState("")
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16
      }}>
      <h1>
        Welcome to your <a href="https://www.plasmo.com">Plasmo</a> {name}!
      </h1>
      <input onChange={(e) => setData(e.target.value)} value={data} />
      <a href="https://docs.plasmo.com">READ THE DOCS!</a>
    </div>
  )
}
</file>

<file path="with-nextjs/src/pages/index.tsx">
import { Main } from "~components/main"
function IndexPage() {
  return <Main name="App" />
}
export default IndexPage
</file>

<file path="with-nextjs/src/popup/index.tsx">
import { Main } from "~components/main"
function IndexPopup() {
  return <Main />
}
export default IndexPopup
</file>

<file path="with-nextjs/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# vercel
.vercel
/.next/
/out/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-nextjs/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-nextjs/next-env.d.ts">

</file>

<file path="with-nextjs/package.json">
{
  "name": "with-nextjs",
  "displayName": "With nextjs",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv"
  ],
  "scripts": {
    "start": "next start",
    "dev": "run-p dev:*",
    "dev:plasmo": "plasmo dev",
    "dev:next": "next dev --port 1947",
    "build": "run-p build:*",
    "build:plasmo": "plasmo build",
    "build:next": "next build"
  },
  "dependencies": {
    "next": "14.1.0",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@plasmohq/rps": "workspace:*",
    "@plasmohq/storage": "workspace:*",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ],
    "permissions": [
      "tabs"
    ]
  }
}
</file>

<file path="with-nextjs/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-nextjs/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": ["node_modules"],
  "include": [".plasmo/index.d.ts", "next-env.d.ts", "./**/*.ts", "./**/*.tsx"],
  "compilerOptions": {
    "paths": {
      "~*": ["./src/*"]
    },
    "baseUrl": ".",
    "isolatedModules": true
  }
}
</file>

<file path="with-options-ui/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

out/
build/
dist/

# plasmo
.plasmo

# typescript
.tsbuildinfo
</file>

<file path="with-options-ui/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-options-ui/options.tsx">
import { useState } from "react"
function OptionsIndex() {
  const [data, setData] = useState("")
  return (
    <div>
      <h1>
        Welcome to your <a href="https:
      </h1>
      <h2>This is the Option UI page!</h2>
      <input onChange={(e) => setData(e.target.value)} value={data} />
    </div>
  )
}
export default OptionsIndex
</file>

<file path="with-options-ui/package.json">
{
  "name": "with-options",
  "displayName": "With options",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-options-ui/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-options-ui/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-permission-ui/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

out/
build/
dist/

# plasmo
.plasmo

# typescript
.tsbuildinfo
</file>

<file path="with-permission-ui/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-permission-ui/options.tsx">
import { StorageToggle } from "@plasmohq/permission-ui"
function OptionsIndex() {
  return (
    <div>
      <StorageToggle />
    </div>
  )
}
export default OptionsIndex
</file>

<file path="with-permission-ui/package.json">
{
  "name": "with-permission-ui",
  "displayName": "With permission ui",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "@plasmohq/permission-ui": "workspace:*",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-permission-ui/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-permission-ui/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-popup/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

out/
build/
dist/

# plasmo
.plasmo

# typescript
.tsbuildinfo
</file>

<file path="with-popup/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-popup/package.json">
{
  "name": "with-popup",
  "displayName": "With popup",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-popup/popup.tsx">
import { useState } from "react"
function IndexPopup() {
  const [data, setData] = useState("")
  return (
    <div
      style={{
        padding: 16
      }}>
      <h2>
        Welcome to your{" "}
        <a href="https:
          Plasmo
        </a>{" "}
        Extension!
      </h2>
      <input onChange={(e) => setData(e.target.value)} value={data} />
      <a href="https://docs.plasmo.com" target="_blank">
        View Docs
      </a>
    </div>
  )
}
export default IndexPopup
</file>

<file path="with-popup/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-popup/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-propelauth/background/messages/ping.ts">
import { createClient } from "@propelauth/javascript"
import type { PlasmoMessaging } from "@plasmohq/messaging"
const client = createClient({
  authUrl: process.env.PLASMO_PUBLIC_AUTH_URL,
  enableBackgroundTokenRefresh: true
})
const handler: PlasmoMessaging.MessageHandler = async (req, res) => {
  const authInfo = await client.getAuthenticationInfoOrNull()
  res.send({
    authInfo
  })
}
export default handler
</file>

<file path="with-propelauth/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-propelauth/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-propelauth/example.env">
PLASMO_PUBLIC_AUTH_URL=
</file>

<file path="with-propelauth/package.json">
{
  "name": "with-propelauth",
  "displayName": "With PropelAuth",
  "version": "0.0.1",
  "description": "A Plasmo example with PropelAuth",
  "author": "andrew <support@propelauth.com>",
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "@plasmohq/messaging": "workspace:*",
    "@propelauth/javascript": "2.0.11",
    "@propelauth/react": "2.0.16",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-propelauth/popup.tsx">
import {
  AuthProvider,
  useHostedPageUrls,
  useLogoutFunction,
  withAuthInfo
} from "@propelauth/react"
import React from "react"
export default function IndexPopup() {
  return (
    <AuthProvider authUrl={process.env.PLASMO_PUBLIC_AUTH_URL}>
      <Popup />
    </AuthProvider>
  )
}
const Popup = withAuthInfo(function IndexPopup({ isLoggedIn, user }) {
  const logoutFn = useLogoutFunction()
  const { getLoginPageUrl, getSignupPageUrl, getAccountPageUrl } =
    useHostedPageUrls()
  const openAccountPage = () => window.open(getAccountPageUrl())
  const openSignupPage = () => window.open(getSignupPageUrl())
  const openLoginPage = () => window.open(getLoginPageUrl())
  if (isLoggedIn) {
    return (
      <div style={{ minWidth: "250px", textAlign: "center" }}>
        <p>
          You are logged in as <b>{user.email}</b>
        </p>
        <button onClick={openAccountPage}>Account</button>
        <button onClick={() => logoutFn(false)}>Logout</button>
      </div>
    )
  } else {
    return (
      <div style={{ minWidth: "250px", textAlign: "center" }}>
        <button onClick={openSignupPage}>Signup</button>
        <button onClick={openLoginPage}>Login</button>
      </div>
    )
  }
})
</file>

<file path="with-propelauth/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-propelauth/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": ["node_modules"],
  "include": [".plasmo/index.d.ts", "./**/*.ts", "./**/*.tsx"],
  "compilerOptions": {
    "paths": {
      "~*": ["./*"]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-react-native/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-react-native/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-react-native/package.json">
{
  "name": "with-react-native",
  "displayName": "With react native",
  "version": "0.0.1",
  "description": "Using Plasmo with React Native Web component",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "alias": {
    "react-native": "react-native-web"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-native": "0.73.2",
    "react-native-web": "0.19.10"
  },
  "devDependencies": {
    "@babel/core": "7.23.7",
    "@babel/preset-env": "7.23.8",
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  },
  "contributors": [
    "louis<louis@plasmo.com>"
  ]
}
</file>

<file path="with-react-native/popup.tsx">
import { useState } from "react"
import { Button, Text, TextInput, View } from "react-native"
function IndexPopup() {
  const [data, setData] = useState("")
  return (
    <View
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16,
        gap: 4
      }}>
      <TextInput
        value={data}
        onChangeText={setData}
        style={{
          borderWidth: 2,
          borderColor: "black"
        }}
      />
      <Button
        title="View Docs"
        onPress={() => {
          window.open("https://docs.plasmo.com", "_blank")
        }}
      />
      <Text>Crafted by @PlasmoHQ</Text>
    </View>
  )
}
export default IndexPopup
</file>

<file path="with-react-native/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-react-native/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": ["node_modules"],
  "include": [".plasmo/index.d.ts", "./**/*.ts", "./**/*.tsx"],
  "compilerOptions": {
    "paths": {
      "~*": ["./*"]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-react-query/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-react-query/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-react-query/newtab.production.tsx">
import { QueryClient, QueryClientProvider } from "@tanstack/react-query"
import Search from "~search"
const queryClient = new QueryClient()
function IndexNewtab() {
  return (
    <QueryClientProvider client={queryClient}>
      <Search />
    </QueryClientProvider>
  )
}
export default IndexNewtab
</file>

<file path="with-react-query/newtab.tsx">
import { QueryClient, QueryClientProvider } from "@tanstack/react-query"
import { ReactQueryDevtools } from "@tanstack/react-query-devtools"
import Search from "~search"
const queryClient = new QueryClient()
function IndexNewtab() {
  return (
    <QueryClientProvider client={queryClient}>
      <Search />
      <ReactQueryDevtools />
    </QueryClientProvider>
  )
}
export default IndexNewtab
</file>

<file path="with-react-query/package.json">
{
  "name": "with-react-query",
  "displayName": "With react query",
  "version": "0.0.1",
  "description": "Plasmo extension using react-query example",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "n4ze3m",
    "louisgv"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "@tanstack/react-query": "5.17.15",
    "@tanstack/react-query-devtools": "5.17.18",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-react-query/popup.tsx">
import { QueryClient, QueryClientProvider } from "@tanstack/react-query"
import Search from "~search"
const queryClient = new QueryClient()
function IndexPopup() {
  return (
    <QueryClientProvider client={queryClient}>
      <Search />
    </QueryClientProvider>
  )
}
export default IndexPopup
</file>

<file path="with-react-query/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-react-query/search.tsx">
import { useQuery } from "@tanstack/react-query"
import { useState } from "react"
type User = {
  name: string
  followers: number
}
const Search = () => {
  const [username, setUsername] = useState("")
  const { status, error, data } = useQuery<boolean, Error, User>(
    ["githubUser", username],
    async ({ queryKey }) => {
      const res = await fetch(`https://api.github.com/users/${queryKey[1]}`)
      if (res.status === 200) {
        return res.json()
      } else if (res.status === 404) {
        throw new Error("User not found")
      } else {
        throw new Error("Failed to fetch user")
      }
    },
    { enabled: Boolean(username) }
  )
  return (
    <div
      style={{
        padding: "10px"
      }}>
      <input
        type="text"
        placeholder="Github username search"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
      />
      {status === "loading" && <p>Loading...</p>}
      {status === "error" && <p>Error: {error.message}</p>}
      {status === "success" && (
        <div>
          <p>{data.name}</p>
          <p>{data.followers} followers</p>
        </div>
      )}
    </div>
  )
}
export default Search
</file>

<file path="with-react-query/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-react-router/routes/about.tsx">
import { useNavigate } from "react-router-dom"
export const About = () => {
  const navigation = useNavigate()
  return (
    <div style={{ padding: 16 }}>
      <span>About page</span>
      <button onClick={() => navigation("/")}>Home</button>
      <button onClick={() => navigation("/lazy")}>Lazy</button>
    </div>
  )
}
</file>

<file path="with-react-router/routes/home.tsx">
import { useNavigate } from "react-router-dom"
export const Home = () => {
  const navigation = useNavigate()
  return (
    <div style={{ padding: 16 }}>
      <span>Home page</span>
      <button onClick={() => navigation("/about")}>About</button>
      <button onClick={() => navigation("/lazy")}>Lazy</button>
    </div>
  )
}
</file>

<file path="with-react-router/routes/index.production.tsx">
import { lazy, Suspense } from "react"
import { Route, Routes } from "react-router-dom"
import { About } from "./about"
import { Home } from "./home"
const LazyDemo = lazy(() => import("~views/demo"))
export const Routing = () => (
  <Routes>
    <Route path="/" element={<Home />} />
    <Route path="/about" element={<About />} />
    <Route
      path="/lazy"
      element={
        <Suspense>
          <LazyDemo />
        </Suspense>
      }
    />
  </Routes>
)
</file>

<file path="with-react-router/routes/index.tsx">
import { Route, Routes } from "react-router-dom"
import LazyDemo from "~views/demo"
import { About } from "./about"
import { Home } from "./home"
export const Routing = () => (
  <Routes>
    <Route path="/" element={<Home />} />
    <Route path="/about" element={<About />} />
    <Route path="/lazy" element={<LazyDemo />} />
  </Routes>
)
</file>

<file path="with-react-router/routes/lazy-route.tsx">
export function Component() {
  return (
    <>
      <h1>You made it!</h1>
    </>
  )
}
</file>

<file path="with-react-router/views/demo.tsx">
const DemoView = () => {
  return (
    <div>
      <h1>Lazy route!</h1>
    </div>
  )
}
export default DemoView
</file>

<file path="with-react-router/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-react-router/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-react-router/package.json">
{
  "name": "with-react-router",
  "displayName": "With react router",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "yashwadhia",
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-router-dom": "6.21.3"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-react-router/popup.production.tsx">
import { MemoryRouter } from "react-router-dom"
import { Routing } from "~routes/index.production"
function IndexPopup() {
  return (
    <MemoryRouter>
      <Routing />
    </MemoryRouter>
  )
}
export default IndexPopup
</file>

<file path="with-react-router/popup.tsx">
import { MemoryRouter } from "react-router-dom"
import { Routing } from "~routes"
function IndexPopup() {
  return (
    <MemoryRouter>
      <Routing />
    </MemoryRouter>
  )
}
export default IndexPopup
</file>

<file path="with-react-router/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-react-router/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-redux/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-redux/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-redux/background.ts">
import { persistor, store } from "~store"
persistor.subscribe(() => {
  console.log("State changed with: ", store?.getState())
})
</file>

<file path="with-redux/counter-slice.ts">
import { createSlice } from "@reduxjs/toolkit"
export interface CounterState {
  count: number
}
const counterSlice = createSlice({
  name: "counter",
  initialState: { count: 0 },
  reducers: {
    increment: (state) => {
      state.count += 1
    },
    decrement: (state) => {
      state.count -= 1
    }
  }
})
export const { increment, decrement } = counterSlice.actions
export default counterSlice.reducer
</file>

<file path="with-redux/counter.tsx">
import { decrement, increment } from "~counter-slice"
import { useAppDispatch, useAppSelector } from "~store"
export const CounterView = () => {
  const dispatch = useAppDispatch()
  const value = useAppSelector((state) => state.counter.count)
  return (
    <div>
      <div>Current count: {value}</div>
      <button onClick={() => dispatch(increment())}>Increment counter</button>
      <button onClick={() => dispatch(decrement())}>Decrement counter</button>
    </div>
  )
}
</file>

<file path="with-redux/options.tsx">
import { Provider } from "react-redux"
import { PersistGate } from "@plasmohq/redux-persist/integration/react"
import { CounterView } from "~counter"
import { persistor, store } from "~store"
function Options() {
  return (
    <Provider store={store}>
      <PersistGate loading={null} persistor={persistor}>
        <CounterView />
      </PersistGate>
    </Provider>
  )
}
export default Options
</file>

<file path="with-redux/package.json">
{
  "name": "with-redux-persistor",
  "displayName": "With redux persistor",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "coldsauce"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "@plasmohq/redux-persist": "6.1.0",
    "@plasmohq/storage": "workspace:*",
    "@reduxjs/toolkit": "2.0.1",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-redux": "9.1.0",
    "redux": "5.0.1",
    "redux-persist-webextension-storage": "1.0.2",
    "redux-thunk": "3.1.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/jest": "29.5.11",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ],
    "permissions": [
      "tabs",
      "storage"
    ]
  }
}
</file>

<file path="with-redux/popup.tsx">
import { Provider } from "react-redux"
import { PersistGate } from "@plasmohq/redux-persist/integration/react"
import { CounterView } from "~counter"
import { persistor, store } from "~store"
function IndexPopup() {
  return (
    <Provider store={store}>
      <PersistGate loading={null} persistor={persistor}>
        <CounterView />
      </PersistGate>
    </Provider>
  )
}
export default IndexPopup
</file>

<file path="with-redux/README.md">
# Warning

This example does not support using Content Scripts with Redux. Please file an issue if you'd like us to support content scripts.

This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-redux/store.ts">
import { combineReducers, configureStore } from "@reduxjs/toolkit"
import { useDispatch, useSelector } from "react-redux"
import type { TypedUseSelectorHook } from "react-redux"
import { syncStorage } from "redux-persist-webextension-storage"
import {
  FLUSH,
  PAUSE,
  PERSIST,
  persistReducer,
  persistStore,
  PURGE,
  REGISTER,
  REHYDRATE,
  RESYNC
} from "@plasmohq/redux-persist"
import { Storage } from "@plasmohq/storage"
import counterSlice from "~counter-slice"
const combinedReducers = combineReducers({
  counter: counterSlice
})
const persistConfig = {
  key: "root",
  version: 1,
  storage: syncStorage
}
const persistedReducer = persistReducer(persistConfig, combinedReducers)
const mockStore = configureStore({
  reducer: combinedReducers
})
export const store = configureStore({
  reducer: persistedReducer,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: {
        ignoredActions: [
          FLUSH,
          REHYDRATE,
          PAUSE,
          PERSIST,
          PURGE,
          REGISTER,
          RESYNC
        ]
      }
    })
}) as typeof mockStore
export const persistor = persistStore(store)
new Storage().watch({
  [`persist:${persistConfig.key}`]: (change) => {
    const { oldValue, newValue } = change
    const updatedKeys = []
    for (const key in oldValue) {
      if (oldValue[key] !== newValue?.[key]) {
        updatedKeys.push(key)
      }
    }
    for (const key in newValue) {
      if (oldValue?.[key] !== newValue[key]) {
        updatedKeys.push(key)
      }
    }
    if (updatedKeys.length > 0) {
      persistor.resync()
    }
  }
})
export type RootState = ReturnType<typeof mockStore.getState>
export type AppDispatch = typeof mockStore.dispatch
export const useAppDispatch: () => AppDispatch = useDispatch
export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
</file>

<file path="with-redux/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "jsx": "react-jsx",
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-selector/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-selector/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-selector/background.ts">
import { init } from "@plasmohq/selector/background"
init({
  monitorId: process.env.PLASMO_PUBLIC_ITERO_SELECTOR_MONITOR_ID
})
</file>

<file path="with-selector/content.tsx">
import type { PlasmoCSConfig, PlasmoGetInlineAnchor } from "plasmo"
import { querySelector } from "@plasmohq/selector"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*", "https://itero.plasmo.com/*"]
}
export const getInlineAnchor: PlasmoGetInlineAnchor = () => {
  const anchor = querySelector(".this .selector .should .not .exist div")
  return anchor
}
export default function ContentStuff() {
  return (
    <div
      style={{
        backgroundColor: "red",
        color: "white",
        padding: "1rem"
      }}>
      <h1>Hello World</h1>
    </div>
  )
}
</file>

<file path="with-selector/example.env">
PLASMO_PUBLIC_ITERO_SELECTOR_MONITOR_ID=
</file>

<file path="with-selector/package.json">
{
  "name": "with-selector",
  "displayName": "With selector",
  "version": "0.0.1",
  "description": "With Plasmo Selector API",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "@plasmohq/selector": "workspace:*",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "contributors": [
    "louis",
    "stefan"
  ]
}
</file>

<file path="with-selector/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-selector/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": ["node_modules"],
  "include": [".plasmo/index.d.ts", "./**/*.ts", "./**/*.tsx"],
  "compilerOptions": {
    "paths": {
      "~*": ["./*"]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-sentry/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-sentry/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-sentry/content.ts">
import type { PlasmoCSConfig } from "plasmo";
import { scope as sentryScope } from "./sentry";
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"],
};
sentryScope.setTag("content-script", "true");
try {
  window.addEventListener("load", () => {
    console.log(
      "You may find that having is not so pleasing a thing as wanting. This is not logical, but it is often true.",
    );
    document.body.style.background = "pink";
  });
} catch (err) {
  sentryScope.captureException(err);
}
</file>

<file path="with-sentry/package.json">
{
  "name": "with-sentry",
  "displayName": "With sentry",
  "version": "0.0.1",
  "description": "Using Plasmo with Sentry",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "@sentry/browser": "8.30.0",
    "@sentry/react": "8.30.0",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  },
  "contributors": [
    "lab"
  ]
}
</file>

<file path="with-sentry/popup.tsx">
import * as _Sentry from "@sentry/react"
import { useState } from "react"
const Sentry = _Sentry
Sentry.init({
  dsn: process.env.PLASMO_PUBLIC_SENTRY_DSN
})
function IndexNewtab() {
  const [data, setData] = useState("")
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16
      }}>
      <h2>
        Welcome to your{" "}
        <a href="https://www.plasmo.com" target="_blank">
          Plasmo
        </a>{" "}
        Extension!
      </h2>
      <input onChange={(e) => setData(e.target.value)} value={data} />
      <a href="https://docs.plasmo.com" target="_blank">
        View Docs
      </a>
    </div>
  )
}
export default Sentry.withProfiler(IndexNewtab)
</file>

<file path="with-sentry/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-sentry/sentry.ts">
import {
  BrowserClient,
  defaultStackParser,
  getDefaultIntegrations,
  makeFetchTransport,
  Scope
} from "@sentry/browser";
const excludedIntegrations = new Set(["BrowserApiErrors", "Breadcrumbs", "GlobalHandlers"]);
const integrations = getDefaultIntegrations({}).filter((defaultIntegration) => {
  return !excludedIntegrations.has(defaultIntegration.name);
});
const sentryClient = new BrowserClient({
  dsn: process.env.PLASMO_PUBLIC_SENTRY_DSN,
  stackParser: defaultStackParser,
  integrations,
  transport: makeFetchTransport
});
const sentryScope = new Scope();
sentryScope.setClient(sentryClient);
sentryClient.init();
export const scope = sentryScope;
</file>

<file path="with-sentry/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": ["node_modules"],
  "include": [".plasmo/index.d.ts", "./**/*.ts", "./**/*.tsx"],
  "compilerOptions": {
    "paths": {
      "~*": ["./*"]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-sidepanel/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-sidepanel/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-sidepanel/package.json">
{
  "name": "with-sidepanel",
  "displayName": "With sidepanel",
  "version": "0.0.1",
  "description": "Using side-panel API in an extension",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  },
  "contributors": [
    "louisgv"
  ]
}
</file>

<file path="with-sidepanel/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the sidepanel by modifying `sidepanel.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-sidepanel/sidepanel.tsx">
import { useState } from "react"
function IndexSidePanel() {
  const [data, setData] = useState("")
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16
      }}>
      <h2>
        Welcome to your
        <a href="https://www.plasmo.com" target="_blank">
          {" "}
          Plasmo
        </a>{" "}
        Extension!
      </h2>
      <input onChange={(e) => setData(e.target.value)} value={data} />
      <a href="https://docs.plasmo.com" target="_blank">
        View Docs
      </a>
    </div>
  )
}
export default IndexSidePanel
</file>

<file path="with-sidepanel/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": ["node_modules"],
  "include": [".plasmo/index.d.ts", "./**/*.ts", "./**/*.tsx"],
  "compilerOptions": {
    "paths": {
      "~*": ["./*"]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-slate/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-slate/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-slate/package.json">
{
  "name": "with-slate",
  "displayName": "With slate",
  "version": "0.0.1",
  "description": "With slate editor",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "slate": "0.101.5",
    "slate-history": "0.100.0",
    "slate-react": "0.101.5"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  },
  "contributors": [
    "lgvic"
  ]
}
</file>

<file path="with-slate/popup.tsx">
import { useState } from "react"
import { createEditor } from "slate"
import { withHistory } from "slate-history"
import { Editable, Slate, withReact } from "slate-react"
const initialValue = [
  {
    type: "paragraph",
    children: [{ text: "A line of text in a paragraph." }]
  }
]
function IndexPopup() {
  const [editor] = useState(() => withReact(withHistory(createEditor())))
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16,
        width: 470
      }}>
      <h2>
        Welcome to your{" "}
        <a href="https://www.plasmo.com" target="_blank">
          Plasmo
        </a>{" "}
        Extension with Slate
      </h2>
      <Slate editor={editor} value={initialValue}>
        <Editable
          style={{
            border: "1px solid #333",
            padding: 16
          }}
        />
      </Slate>
      <a href="https://docs.plasmo.com" target="_blank">
        View Docs
      </a>
    </div>
  )
}
export default IndexPopup
</file>

<file path="with-slate/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-slate/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": ["node_modules"],
  "include": [".plasmo/index.d.ts", "./**/*.ts", "./**/*.tsx"],
  "compilerOptions": {
    "paths": {
      "~*": ["./*"]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-src/src/contents/plasmo.ts">
import type { PlasmoCSConfig } from "plasmo"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}
window.addEventListener("load", () => {
  console.log("content script loaded")
  document.body.style.background = "pink"
})
</file>

<file path="with-src/src/background.ts">
export {}
console.log("HELLO WORLD FROM BGSCRIPTS")
</file>

<file path="with-src/src/newtab.tsx">
import { useState } from "react"
import "./style.css"
function IndexNewtab() {
  const [data, setData] = useState("")
  return (
    <div
      className="new-tab"
      style={{
        padding: 16,
        display: "flex",
        flexDirection: "column"
      }}>
      <h1>
        Welcome to your <a href="https://www.plasmo.com">Plasmo</a> Extension!
      </h1>
      <input onChange={(e) => setData(e.target.value)} value={data} />
      <footer>Crafted by @PlasmoHQ</footer>
    </div>
  )
}
export default IndexNewtab
</file>

<file path="with-src/src/options.tsx">
import { useState } from "react"
function IndexOptions() {
  const [data, setData] = useState("")
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16
      }}>
      <h1>
        Welcome to your <a href="https://www.plasmo.com">Plasmo</a> Extension!
      </h1>
      <input onChange={(e) => setData(e.target.value)} value={data} />
      <footer>Crafted by @PlasmoHQ</footer>{" "}
    </div>
  )
}
export default IndexOptions
</file>

<file path="with-src/src/popup.tsx">
import { useState } from "react"
function IndexPopup() {
  const [data, setData] = useState("")
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16
      }}>
      <h1>
        Welcome to your <a href="https://www.plasmo.com">Plasmo</a> Extension!
      </h1>
      <input onChange={(e) => setData(e.target.value)} value={data} />
      <footer>Crafted by @PlasmoHQ</footer>
    </div>
  )
}
export default IndexPopup
</file>

<file path="with-src/src/style.css">
.new-tab {
  background-color: #f0f0f0;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  color: #333;
  display: block;
  font-size: 12px;
  line-height: 16px;
  margin: 0 0 10px;
  padding: 10px;
  position: relative;
  text-decoration: none;
  width: 100%;
}
</file>

<file path="with-src/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-src/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-src/package.json">
{
  "name": "with-src",
  "displayName": "With src",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv",
    "Leizhenpeng"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ],
    "permissions": [
      "tabs"
    ]
  }
}
</file>

<file path="with-src/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-src/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./src/*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-storage/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo
.plasmo

# typescript
.tsbuildinfo
</file>

<file path="with-storage/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-storage/background.ts">
import assert from "assert"
import { Storage } from "@plasmohq/storage"
import { SecureStorage } from "@plasmohq/storage/secure"
const PASSWORD = "password"
const TEST_KEY = "ship"
const TEST_DATA = "1701"
async function testSecureStorage() {
  const storage = new SecureStorage({ area: "local" })
  await storage.clear()
  await storage.setPassword(PASSWORD)
  storage.watch({
    [TEST_KEY]: (c) => {
      console.log(TEST_KEY, c)
    }
  })
  await storage.set(TEST_KEY, TEST_DATA)
  const foo = await storage.get(TEST_KEY)
  assert(foo === TEST_DATA, "ENCRYPTION FAILED")
  console.log(await storage.getAll())
  await storage.set(TEST_KEY, TEST_DATA + "2")
  await storage.clear()
}
async function testBaseStorage() {
  const storage = new Storage()
  await storage.clear()
  storage.watch({
    hello: (c) => {
      console.log("hello", c)
    },
    "serial-number": (c) => {
      console.log("serial-number", c)
    },
    make: (c) => {
      console.log("make", c)
    }
  })
  await storage.set("hello", 1)
  await storage.set("serial-number", 1701)
  await storage.set("make", "plasmo-corp")
  await new Promise((resolve) => setTimeout(resolve, 470))
  storage.watch({
    make: (c) => {
      console.log("watch make 2", c)
    }
  })
  await storage.set("hello", 2)
  await storage.set("serial-number", 8451)
  await storage.set("make", "PlasmoHQ")
}
const main = async () => {
  await testSecureStorage()
  await new Promise((resolve) => setTimeout(resolve, 1470))
  await testBaseStorage()
}
main()
</file>

<file path="with-storage/content.tsx">
import type { PlasmoCSConfig } from "plasmo"
import { useStorage } from "@plasmohq/storage/hook"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}
export const getRootContainer = () => {
  return document.querySelector("#feature")
}
const PlasmoOverlay = () => {
  const [openCount] = useStorage<number>("open-count")
  const [checked] = useStorage<boolean>("checked")
  const [serialNumber] = useStorage<string>("serial-number")
  return (
    <span
      style={{
        padding: 12
      }}>
      <h1>HELLO WORLD ROOT CONTAINER</h1>
      <input
        type={"checkbox"}
        readOnly
        checked={checked === undefined ? true : checked}
      />
      <p>
        Open: {openCount}
        <i>#{serialNumber}</i>
      </p>
    </span>
  )
}
export default PlasmoOverlay
</file>

<file path="with-storage/example.env">
FIREFOX_EXT_ID=with-storage@foss.plasmo.com
</file>

<file path="with-storage/options.tsx">
import { useStorage } from "@plasmohq/storage/hook"
function IndexOptions() {
  const [openCount] = useStorage<number>("open-count")
  const [checked] = useStorage<boolean>("checked")
  const [serialNumber] = useStorage<string>("serial-number")
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16
      }}>
      <p>Times opened: {openCount}</p>
      <input
        type={"checkbox"}
        readOnly
        checked={checked === undefined ? true : checked}
      />
      <i>#{serialNumber || 0}</i>
    </div>
  )
}
export default IndexOptions
</file>

<file path="with-storage/package.json">
{
  "name": "with-storage",
  "displayName": "With storage",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "coldsauce"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "@plasmohq/storage": "workspace:*",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ],
    "browser_specific_settings": {
      "gecko": {
        "id": "$FIREFOX_EXT_ID"
      }
    }
  }
}
</file>

<file path="with-storage/popup.tsx">
import { useStorage } from "@plasmohq/storage/hook"
function IndexPopup() {
  const [openCount] = useStorage<number>("open-count", (storedCount) =>
    typeof storedCount === "undefined" ? 0 : storedCount + 1
  )
  const [checked, setChecked] = useStorage("checked", true)
  const [serialNumber, setSerialNumber] = useStorage("serial-number", "8427")
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16,
        width: 300,
      }}>
      <p>Times opened: {openCount}</p>
      <input
        type={"checkbox"}
        checked={checked}
        onChange={(e) => setChecked(e.target.checked)}
      />
      <input
        value={serialNumber}
        onChange={(e) => setSerialNumber(e.target.value)}
      />
      {serialNumber}
    </div>
  )
}
export default IndexPopup
</file>

<file path="with-storage/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-storage/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-stripe/core/access-token.ts">
export const getAccessToken = () =>
  new Promise((resolve) =>
    chrome.identity.getAuthToken(null, (token) => {
      if (!!token) {
        resolve(token)
      }
    })
  )
</file>

<file path="with-stripe/core/premium-api.ts">
import { getAccessToken } from "./access-token"
export const callAPI = async (uri: string, opts: RequestInit) =>
  fetch(`${process.env.PLASMO_PUBLIC_API_URI}${uri}`, {
    method: "GET",
    headers: {
      Authorization: `Bearer ${await getAccessToken()}`
    },
    ...opts
  }).then((res) => res.json())
</file>

<file path="with-stripe/core/user-info.tsx">
import { createProvider } from "puro"
import { useContext, useEffect, useState } from "react"
const useUserInfoProvider = () => {
  const [userInfo, setUserInfo] = useState<chrome.identity.UserInfo>(null)
  useEffect(() => {
    chrome.identity.getProfileUserInfo((data) => {
      if (data.email && data.id) {
        setUserInfo(data)
      }
    })
  }, [])
  return userInfo
}
const { BaseContext, Provider } = createProvider(useUserInfoProvider)
export const useUserInfo = () => useContext(BaseContext)
export const UserInfoProvider = Provider
</file>

<file path="with-stripe/pages/api/_common.ts">
import { OAuth2Client } from "google-auth-library"
import Stripe from "stripe"
const stripe = new Stripe(process.env.STRIPE_PRIVATE_KEY, {
  apiVersion: "2023-08-16"
})
export const getUserInfo = async (authHeader: string) => {
  const [type, accessToken] = authHeader.split(" ")
  if (type !== "Bearer" || !accessToken) {
    throw new Error("Invalid or no access token")
  }
  const client = new OAuth2Client()
  client.setCredentials({
    access_token: accessToken
  })
  const userInfoRes = await client.request<{
    id: string
    email: string
    name: string
  }>({
    url: "https://www.googleapis.com/oauth2/v1/userinfo"
  })
  return userInfoRes.data
}
export const getSubsciption = async (email: string) => {
  const customerResp = await stripe.customers.list({
    email,
    limit: 1
  })
  if (customerResp.data.length === 0) {
    throw new Error(`No customer data found for ${email}`)
  }
  const [customer] = customerResp.data
  const subscriptionResp = await stripe.subscriptions.list({
    customer: customer.id
  })
  if (subscriptionResp.data.length === 0) {
    throw new Error(`No subscription found for customer id ${customer.id}`)
  }
  return subscriptionResp.data[0]
}
</file>

<file path="with-stripe/pages/api/check-subscription.ts">
import type { NextApiRequest, NextApiResponse } from "next"
import { getSubsciption, getUserInfo } from "./_common"
export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    if (req.method !== "GET") {
      throw new Error("Invalid request method")
    }
    const userInfo = await getUserInfo(req.headers.authorization)
    const subscription = await getSubsciption(userInfo.email)
    return res.status(200).json({ active: subscription.status === "active" })
  } catch (error) {
    return res.status(401).json({ success: false, error: error.message })
  }
}
</file>

<file path="with-stripe/pages/api/premium-feature.ts">
import type { NextApiRequest, NextApiResponse } from "next"
import { getSubsciption, getUserInfo } from "./_common"
export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    if (req.method !== "POST") {
      throw new Error("Invalid request method")
    }
    const userInfo = await getUserInfo(req.headers.authorization)
    const subscription = await getSubsciption(userInfo.email)
    if (subscription.status !== "active") {
      throw new Error(`Subscription is not active`)
    }
    return res.status(200).json({ success: true, code: "147" })
  } catch (error) {
    return res.status(401).json({ success: false, error: error.message })
  }
}
</file>

<file path="with-stripe/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

# vercel
.next
.vercel

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-stripe/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-stripe/example.env.development">
PLASMO_PUBLIC_API_URI=
PLASMO_PUBLIC_STRIPE_LINK=

STRIPE_PRIVATE_KEY=

OAUTH_CLIENT_ID=

CRX_PUBLIC_KEY=
CRX_PRIVATE_KEY=
</file>

<file path="with-stripe/index.d.ts">
declare namespace NodeJS {
  interface ProcessEnv {
    PLASMO_PUBLIC_API_URI?: string
    PLASMO_PUBLIC_STRIPE_LINK?: string
    STRIPE_PRIVATE_KEY?: string
    OAUTH_CLIENT_ID?: string
    CRX_PUBLIC_KEY?: string
    CRX_PRIVATE_KEY?: string
  }
}
</file>

<file path="with-stripe/next-env.d.ts">

</file>

<file path="with-stripe/package.json">
{
  "name": "with-stripe",
  "displayName": "With stripe",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv"
  ],
  "scripts": {
    "dev": "run-p dev:*",
    "dev:plasmo": "plasmo dev",
    "dev:next": "next dev --port 8472",
    "build": "run-p build:*",
    "build:plasmo": "plasmo build",
    "build:next": "next build"
  },
  "dependencies": {
    "google-auth-library": "9.4.2",
    "next": "14.1.0",
    "plasmo": "workspace:*",
    "puro": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "stripe": "14.13.0",
    "swr": "2.2.4"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@plasmohq/rps": "workspace:*",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "key": "$CRX_PUBLIC_KEY",
    "oauth2": {
      "client_id": "$OAUTH_CLIENT_ID",
      "scopes": [
        "https://www.googleapis.com/auth/userinfo.email",
        "https://www.googleapis.com/auth/userinfo.profile"
      ]
    },
    "host_permissions": [
      "$PLASMO_PUBLIC_API_URI/*",
      "https://*/*"
    ],
    "permissions": [
      "identity",
      "identity.email"
    ]
  }
}
</file>

<file path="with-stripe/popup.tsx">
import useSWR from "swr"
import { callAPI } from "~core/premium-api"
import { UserInfoProvider, useUserInfo } from "~core/user-info"
const PremiumFeatureButton = () => {
  const { data, error } = useSWR<{ active: boolean }>(
    "/api/check-subscription",
    callAPI
  )
  const userInfo = useUserInfo()
  if (!!error || !data?.active) {
    return (
      <button
        disabled={!userInfo}
        onClick={async () => {
          chrome.identity.getAuthToken(
            {
              interactive: true
            },
            (token) => {
              if (!!token) {
                window.open(
                  `${
                    process.env.PLASMO_PUBLIC_STRIPE_LINK
                  }?client_reference_id=${
                    userInfo.id
                  }&prefilled_email=${encodeURIComponent(userInfo.email)}`,
                  "_blank"
                )
              }
            }
          )
        }}>
        Subscribe to Paid feature
      </button>
    )
  }
  return (
    <button
      onClick={async () => {
        const data = await callAPI("/api/premium-feature", {
          method: "POST"
        })
        alert(data.code)
      }}>
      Calling Awesome Premium Feature
    </button>
  )
}
const EmailShowcase = () => {
  const userInfo = useUserInfo()
  return (
    <div>
      Your email is: <b>{userInfo?.email}</b>
    </div>
  )
}
function IndexPopup() {
  return (
    <UserInfoProvider>
      <div
        style={{
          display: "flex",
          flexDirection: "column",
          padding: 16
        }}>
        <h1>
          Welcome to your <a href="https://www.plasmo.com">Plasmo</a> Extension!
        </h1>
        <EmailShowcase />
        <PremiumFeatureButton />
      </div>
    </UserInfoProvider>
  )
}
export default IndexPopup
</file>

<file path="with-stripe/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-stripe/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": ["node_modules"],
  "include": [".plasmo/index.d.ts", "./**/*.ts", "./**/*.tsx"],
  "compilerOptions": {
    "paths": {
      "~*": ["./*"]
    },
    "baseUrl": ".",
    "isolatedModules": true
  }
}
</file>

<file path="with-styled-components/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-styled-components/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-styled-components/components.tsx">
import styled from "styled-components"
export const Container = styled.main`
  display: flex;
  flex-direction: column;
  padding: 1rem;
  margin: 0 auto;
  background: azure;
`
export const Link = styled.a`
  padding: 0.25rem;
  color: cornflowerblue;
`
</file>

<file path="with-styled-components/content.tsx">
import type { PlasmoCSUIProps, PlasmoGetStyle } from "plasmo"
import { useState } from "react"
import { StyleSheetManager } from "styled-components"
import { Container, Link } from "~components"
export const getStyle: PlasmoGetStyle = async () => {
  const style = document.createElement("style")
  style.setAttribute("data-styled", "")
  return style
}
export const getShadowHostId = () => "plasmo-overlay-123"
function PlasmoOverlay({ anchor }: PlasmoCSUIProps) {
  const [data, setData] = useState("")
  return (
    // If you are using a ThemeProvider put it after the StyleSheetManager
    <StyleSheetManager
      target={anchor.element.firstElementChild.shadowRoot.getElementById(
        getShadowHostId()
      )}>
      <Container>
        <h2>
          Welcome to your{" "}
          <Link href="https:
            Plasmo
          </Link>{" "}
          Extension!
        </h2>
        <input onChange={(e) => setData(e.target.value)} value={data} />
        <Link href="https://docs.plasmo.com" target="_blank">
          View Docs
        </Link>
      </Container>
    </StyleSheetManager>
  )
}
export default PlasmoOverlay
</file>

<file path="with-styled-components/package.json">
{
  "name": "with-styled-components",
  "displayName": "With styled components",
  "version": "0.0.1",
  "description": "Integrating Styled Components styling solution with Plasmo.",
  "author": "Nikolas Huebecker <nikolas@onward.so>",
  "contributors": [
    "nhuebecker"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "styled-components": "6.1.8"
  },
  "devDependencies": {
    "@babel/core": "7.23.7",
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-styled-components/popup.tsx">
import { useState } from "react"
import { Container, Link } from "~components"
function IndexPopup() {
  const [data, setData] = useState("")
  return (
    <Container>
      <h2>
        Welcome to your{" "}
        <Link href="https:
          Plasmo
        </Link>{" "}
        Extension!
      </h2>
      <input onChange={(e) => setData(e.target.value)} value={data} />
      <Link href="https://docs.plasmo.com" target="_blank">
        View Docs
      </Link>
    </Container>
  )
}
export default IndexPopup
</file>

<file path="with-styled-components/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-styled-components/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-supabase/background/messages/init-session.ts">
import type { PlasmoMessaging } from "@plasmohq/messaging"
import { supabase } from "~core/supabase"
const handler: PlasmoMessaging.MessageHandler = async (req, res) => {
  supabase.auth.onAuthStateChange((event, session) => {
    console.log(event, session)
  })
  await supabase.auth.setSession(req.body)
  res.send({ success: true })
}
export default handler
</file>

<file path="with-supabase/background/index.ts">
export {}
chrome.action.onClicked.addListener(() => {
  chrome.runtime.openOptionsPage()
})
</file>

<file path="with-supabase/core/supabase.ts">
import { createClient } from "@supabase/supabase-js"
import { Storage } from "@plasmohq/storage"
const storage = new Storage({
  area: "local"
})
export const supabase = createClient(
  process.env.PLASMO_PUBLIC_SUPABASE_URL,
  process.env.PLASMO_PUBLIC_SUPABASE_KEY,
  {
    auth: {
      storage,
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true
    }
  }
)
</file>

<file path="with-supabase/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-supabase/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-supabase/example.env">
PLASMO_PUBLIC_SUPABASE_URL=
PLASMO_PUBLIC_SUPABASE_KEY=

CRX_KEY=
CRX_ID=
</file>

<file path="with-supabase/options.tsx">
import type { Provider, User } from "@supabase/supabase-js"
import { useEffect, useState } from "react"
import { sendToBackground } from "@plasmohq/messaging"
import { Storage } from "@plasmohq/storage"
import { useStorage } from "@plasmohq/storage/hook"
import { supabase } from "~core/supabase"
function IndexOptions() {
  const [user, setUser] = useStorage<User>({
    key: "user",
    instance: new Storage({
      area: "local"
    })
  })
  const [username, setUsername] = useState("")
  const [password, setPassword] = useState("")
  useEffect(() => {
    async function init() {
      const { data, error } = await supabase.auth.getSession()
      if (error) {
        console.error(error)
        return
      }
      if (!!data.session) {
        setUser(data.session.user)
        sendToBackground({
          name: "init-session",
          body: {
            refresh_token: data.session.refresh_token,
            access_token: data.session.access_token
          }
        })
      }
    }
    init()
  }, [])
  const handleEmailLogin = async (
    type: "LOGIN" | "SIGNUP",
    username: string,
    password: string
  ) => {
    try {
      const {
        error,
        data: { user }
      } =
        type === "LOGIN"
          ? await supabase.auth.signInWithPassword({
              email: username,
              password
            })
          : await supabase.auth.signUp({ email: username, password })
      if (error) {
        alert("Error with auth: " + error.message)
      } else if (!user) {
        alert("Signup successful, confirmation mail should be sent soon!")
      } else {
        setUser(user)
      }
    } catch (error) {
      console.log("error", error)
      alert(error.error_description || error)
    }
  }
  const handleOAuthLogin = async (provider: Provider, scopes = "email") => {
    await supabase.auth.signInWithOAuth({
      provider,
      options: {
        scopes,
        redirectTo: location.href
      }
    })
  }
  return (
    <main
      style={{
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        width: "100%",
        top: 240,
        position: "relative"
      }}>
      <div
        style={{
          display: "flex",
          flexDirection: "column",
          width: 240,
          justifyContent: "space-between",
          gap: 4.2
        }}>
        {user && (
          <>
            <h3>
              {user.email} - {user.id}
            </h3>
            <button
              onClick={() => {
                supabase.auth.signOut()
                setUser(null)
              }}>
              Logout
            </button>
          </>
        )}
        {!user && (
          <>
            <label>Email</label>
            <input
              type="text"
              placeholder="Your Username"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
            />
            <label>Password</label>
            <input
              type="password"
              placeholder="Your password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
            <button
              onClick={(e) => {
                handleEmailLogin("SIGNUP", username, password)
              }}>
              Sign up
            </button>
            <button
              onClick={(e) => {
                handleEmailLogin("LOGIN", username, password)
              }}>
              Login
            </button>
            <button
              onClick={(e) => {
                handleOAuthLogin("github")
              }}>
              Sign in with GitHub
            </button>
          </>
        )}
      </div>
    </main>
  )
}
export default IndexOptions
</file>

<file path="with-supabase/package.json">
{
  "name": "with-supabase",
  "displayName": "With supabase",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "@plasmohq/messaging": "workspace:*",
    "@plasmohq/storage": "workspace:*",
    "@supabase/supabase-js": "2.39.3",
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "key": "$CRX_KEY",
    "host_permissions": [
      "https://*/*"
    ],
    "web_accessible_resources": [
      {
        "resources": [
          "options.html"
        ],
        "matches": [
          "<all_urls>"
        ],
        "extension_ids": [
          "$CRX_ID"
        ]
      }
    ]
  }
}
</file>

<file path="with-supabase/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-supabase/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-svelte/contents/plasmo-inline.svelte">
<script context="module" lang="ts">
  import type {
    PlasmoCSConfig,
    PlasmoGetInlineAnchor,
    PlasmoMountShadowHost
  } from "plasmo"
  export const config: PlasmoCSConfig = {
    matches: ["https://www.plasmo.com/*"]
  }
  export const getInlineAnchor: PlasmoGetInlineAnchor = () =>
    document.querySelector("#supercharge > h3 > span")
  export const mountShadowHost: PlasmoMountShadowHost = ({
    anchor, shadowHost
  }) => {
    anchor!.element!.insertBefore(shadowHost!, anchor!.element!.firstChild)
  }
</script>
<script>
  let count = 0
  let increment = () => count++
</script>
<div>
  <span style="color: red;">{count}</span>
  <button on:click={increment}>A lie is a very poor way to say hello</button>
</div>
</file>

<file path="with-svelte/contents/plasmo-overlay.css">
#plasmo-shadow-container {
  width: 200px;
  background-color: purple;
}
#plasmo-mount-container {
  border: 8px solid aqua;
}
</file>

<file path="with-svelte/contents/plasmo-overlay.svelte">
<script context="module" lang="ts">
  import cssText from "data-text:~/contents/plasmo-overlay.css"
  import type { PlasmoCSConfig } from "plasmo"
  export const config: PlasmoCSConfig = {
    matches: ["https://www.plasmo.com/*"]
  }
  export const getStyle = () => {
    const style = document.createElement("style")
    style.textContent = cssText
    return style
  }
</script>
<span class="hw-top">Every living thing wants to survive</span>
<style>
  .hw-top {
    background: red;
    color: white;
    font-family: "Fascinate";
    width: 200px;
    border: 8px solid aqua;
  }
</style>
</file>

<file path="with-svelte/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-svelte/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-svelte/package.json">
{
  "name": "with-svelte",
  "displayName": "With svelte",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv",
    "joacoesteban"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "svelte": "4.2.9",
    "svelte-preprocess": "5.1.3"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-svelte/popup.svelte">
<script lang="ts">
  export let count = 0
  let action: string = null
  function increment() {
    count += 1
    action = "increment"
  }
  function decrement() {
    count -= 1
    action = "decrement"
  }
</script>
<div>
  <h2 class="text-center">
    Welcome to your <a href="https://www.plasmo.com" target="_blank">Plasmo</a> Extension!
  </h2>
  <div class="container">
    <button on:click={decrement}>-</button>
    <p>Current count: <b>{count}</b></p>
    <button on:click={increment}>+</button>
  </div>
  {#if action}<p class="action text-center">{action}</p>{/if}
  <a href="https://docs.plasmo.com" target="_blank"> View Docs </a>
</div>
<style>
  .container {
    min-width: 470px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 47px;
  }
  .action {
    color: #470;
    font-weight: bold;
  }
  .text-center {
    text-align: center;
  }
</style>
</file>

<file path="with-svelte/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, make sure to replace `type="ts"` with `lang="ts"` in your Svelte components.

Second, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-svelte/sandbox.svelte">
<div>
  <h2 class="text-center">
    Welcome to your <a href="https://www.plasmo.com" target="_blank">Plasmo</a> Extension!
  </h2>
</div>
</file>

<file path="with-svelte/svelte.config.mjs">
import preprocess from "svelte-preprocess"

/**
 * This will add autocompletion if you're working with SvelteKit
 * https://github.com/sveltejs/svelte-preprocess/blob/main/docs/usage.md
 * @type {import('@sveltejs/kit').Config}
 */
const config = {
  preprocess: preprocess({
    // ...svelte-preprocess options
  }),
  compilerOptions: {
    css: 'injected', // this is the default mode
  }
  // ...other svelte options
}

export default config
</file>

<file path="with-svelte/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.svelte"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": ".",
    "types": ["svelte"]
  }
}
</file>

<file path="with-tabs/tabs/delta-flyer.html">
<!DOCTYPE html>
<html>
  <head>
    <title>Delta Flyer Yo</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  </head>
  <body></body>
</html>
</file>

<file path="with-tabs/tabs/delta-flyer.tsx">
export default function DeltaFlyerPage() {
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16
      }}>
      <h2>Delta Flyer Tab</h2>
      <p>This tab is only available on the Delta Flyer page.</p>
    </div>
  )
}
</file>

<file path="with-tabs/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-tabs/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-tabs/package.json">
{
  "name": "with-tabs",
  "displayName": "With tabs",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "tuntun0609"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ],
    "permissions": [
      "scripting"
    ],
    "web_accessible_resources": [
      {
        "matches": [
          "<all_urls>"
        ],
        "resources": [
          "tabs/delta-flyer.html"
        ]
      }
    ]
  }
}
</file>

<file path="with-tabs/popup.tsx">
import { useState } from "react"
function IndexPopup() {
  const [data, setData] = useState("")
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16
      }}>
      <h2>
        Welcome to your{" "}
        <a href="https://www.plasmo.com" target="_blank">
          Plasmo
        </a>{" "}
        Extension!
      </h2>
      <input onChange={(e) => setData(e.target.value)} value={data} />
      <a href="https://docs.plasmo.com" target="_blank">
        View Docs
      </a>
      <button
        onClick={() => {
          chrome.tabs.create({
            url: "./tabs/delta-flyer.html"
          })
        }}>
        open tab page
      </button>
      <button
        onClick={() => {
          chrome.tabs.query(
            { active: true, currentWindow: true },
            function (tabs) {
              const { id } = tabs[0]
              chrome.scripting.executeScript({
                target: { tabId: id },
                func: () => {
                  const iframe = document.createElement("iframe")
                  iframe.src = chrome.runtime.getURL("/tabs/delta-flyer.html")
                  iframe.name = "delta-flyer"
                  document.body.appendChild(iframe)
                }
              })
            }
          )
        }}>
        iframe mounting
      </button>
    </div>
  )
}
export default IndexPopup
</file>

<file path="with-tabs/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-tabs/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-tailwindcss/src/features/count-button.tsx">
import { useReducer } from "react"
export const CountButton = () => {
  const [count, increase] = useReducer((c) => c + 1, 0)
  return (
    <button
      onClick={() => increase()}
      type="button"
      className="plasmo-flex plasmo-flex-row plasmo-items-center plasmo-px-4 plasmo-py-2 plasmo-text-sm plasmo-rounded-lg plasmo-transition-all plasmo-border-none
      plasmo-shadow-lg hover:plasmo-shadow-md
      active:plasmo-scale-105 plasmo-bg-slate-50 hover:plasmo-bg-slate-100 plasmo-text-slate-800 hover:plasmo-text-slate-900">
      Count:
      <span className="plasmo-inline-flex plasmo-items-center plasmo-justify-center plasmo-w-8 plasmo-h-4 plasmo-ml-2 plasmo-text-xs plasmo-font-semibold plasmo-rounded-full">
        {count}
      </span>
    </button>
  )
}
</file>

<file path="with-tailwindcss/src/content.tsx">
import cssText from "data-text:~style.css"
import type { PlasmoCSConfig } from "plasmo"
import { CountButton } from "~features/count-button"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}
export const getStyle = () => {
  const style = document.createElement("style")
  style.textContent = cssText
  return style
}
const PlasmoOverlay = () => {
  return (
    <div className="plasmo-z-50 plasmo-flex plasmo-fixed plasmo-top-32 plasmo-right-8">
      <CountButton />
    </div>
  )
}
export default PlasmoOverlay
</file>

<file path="with-tailwindcss/src/popup.tsx">
import { CountButton } from "~features/count-button"
import "~style.css"
function IndexPopup() {
  return (
    <div className="plasmo-flex plasmo-items-center plasmo-justify-center plasmo-h-16 plasmo-w-40">
      <CountButton />
    </div>
  )
}
export default IndexPopup
</file>

<file path="with-tailwindcss/src/style.css">
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap");
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path="with-tailwindcss/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-tailwindcss/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-tailwindcss/package.json">
{
  "name": "with-tailwindcss",
  "displayName": "With tailwindcss",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "tailwindcss": "3.4.1"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "postcss": "8.4.33",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-tailwindcss/postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {}
  }
}
</file>

<file path="with-tailwindcss/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-tailwindcss/tailwind.config.js">
module.exports = {
  content: ["./src/**/*.{tsx,html}"],
  darkMode: "media",
  prefix: "plasmo-"
}
</file>

<file path="with-tailwindcss/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./src/*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-tw-radix/cfg/radix.js">
const radix = require("@radix-ui/colors")
const getColorMap = (
  colorList
) =>
  colorList.reduce((acc, color) => {
    acc[color] = radix[color]
    acc[`${color}Dark`] = radix[`${color}Dark`]
    return acc
  }, {})
module.exports = getColorMap(["gray"])
</file>

<file path="with-tw-radix/cfg/tailwind.base.js">
module.exports = {
  content: ["./src/**/*.{tsx,html}"],
  darkMode: "media",
  corePlugins: {
    preflight: false
  },
  plugins: [
    require("windy-radix-palette")({
      colors: require("./radix")
    })
  ]
}
</file>

<file path="with-tw-radix/cfg/tailwind.config.js">
module.exports = {
  content: ["./src/**/*.{tsx,html}"],
  darkMode: "media",
  plugins: [
    require("windy-radix-palette")({
      colors: require("./radix")
    })
  ]
}
</file>

<file path="with-tw-radix/src/features/count-button.tsx">
import { useReducer } from "react"
export const CountButton = () => {
  const [count, increase] = useReducer((c) => c + 1, 0)
  return (
    <button
      onClick={() => increase()}
      type="button"
      className="flex flex-row items-center px-4 py-2 text-sm rounded-lg transition-all border-none
      shadow-gray-1 shadow-lg hover:shadow-md
      text-gray-12 bg-gray-2
      hover:bg-gray-3
      active:bg-gray-4
      disabled:bg-gray-1 disabled:text-gray-11
      active:scale-105">
      Count:
      <span className="inline-flex items-center justify-center w-8 h-4 ml-2 text-xs font-semibold text-gray-12 bg-gray-9 hover:bg-gray-10 rounded-full">
        {count}
      </span>
    </button>
  )
}
</file>

<file path="with-tw-radix/src/base.css">
@config "../cfg/tailwind.base.js";
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap");
@tailwind base;
</file>

<file path="with-tw-radix/src/content.tsx">
import cssText from "data-text:~style.css"
import type { PlasmoCSConfig } from "plasmo"
import { CountButton } from "~features/count-button"
import "~base.css"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}
export const getStyle = () => {
  const style = document.createElement("style")
  style.textContent = cssText
  return style
}
const PlasmoOverlay = () => {
  return (
    <div className="z-50 flex fixed top-16 right-8">
      <CountButton />
    </div>
  )
}
export default PlasmoOverlay
</file>

<file path="with-tw-radix/src/popup.tsx">
import { CountButton } from "~features/count-button"
import "~base.css"
import "~style.css"
function IndexPopup() {
  return (
    <div className="flex bg-gray-1 items-center justify-center h-16 w-40">
      <CountButton />
    </div>
  )
}
export default IndexPopup
</file>

<file path="with-tw-radix/src/style.css">
@config "../cfg/tailwind.config.js";
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path="with-tw-radix/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-tw-radix/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-tw-radix/package.json">
{
  "name": "with-tw-radix",
  "displayName": "With tailwindcss + radix",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@radix-ui/colors": "2.1.0",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "postcss": "8.4.33",
    "prettier": "3.2.4",
    "tailwindcss": "3.4.1",
    "typescript": "5.3.3",
    "windy-radix-palette": "0.6.1"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-tw-radix/postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {}
  }
}
</file>

<file path="with-tw-radix/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-tw-radix/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./src/*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path="with-vue/contents/plasmo-inline.vue">
<script lang="ts">
import type {
  PlasmoCSConfig,
  PlasmoGetInlineAnchor,
  PlasmoMountShadowHost
} from "plasmo"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}
const getInlineAnchor: PlasmoGetInlineAnchor = () =>
  document.querySelector("#supercharge > h3 > span")
const mountShadowHost: PlasmoMountShadowHost = ({ anchor, shadowHost }) => {
  anchor!.element!.insertBefore(shadowHost!, anchor!.element!.firstChild)
}
export default {
  plasmo: {
    getInlineAnchor,
    mountShadowHost
  },
  data() {
    return {
      count: 0
    }
  },
  setup() {},
  mounted() {}
}
</script>
<template>
  <div>
    <span style="color: red">{{ count }}</span>
    <button @click="count++">Many Myths are based on truth</button>
  </div>
</template>
</file>

<file path="with-vue/contents/plasmo-overlay.css">
.hw-top {
  background: red;
  color: white;
  font-family: "Fascinate";
}
#plasmo-shadow-container {
  width: 200px;
  background-color: purple;
}
#plasmo-mount-container {
  border: 8px solid aqua;
}
</file>

<file path="with-vue/contents/plasmo-overlay.vue">
<template>
  <span className="hw-top">
    If I can have honesty, it's easier to overlook mistakes
  </span>
</template>
<script lang="ts">
import cssText from "data-text:~/contents/plasmo-overlay.css"
import type { PlasmoCSConfig, PlasmoGetStyle } from "plasmo"
export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}
const getStyle: PlasmoGetStyle = () => {
  const style = document.createElement("style")
  style.textContent = cssText
  return style
}
export default {
  plasmo: {
    getStyle
  },
  setup() {},
  mounted() {}
}
</script>
</file>

<file path="with-vue/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-vue/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-vue/package.json">
{
  "name": "with-vue",
  "displayName": "With vue",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "vue": "3.4.15"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-vue/popup.vue">
<template>
  <div>
    <h2 class="text-center">
      Welcome to your
      <a href="https://www.plasmo.com" target="_blank">Plasmo</a> Extension!
    </h2>
    <div class="container">
      <button @click="decrement">-</button>
      <p>
        <b>{{ state.count }}</b>
      </p>
      <button @click="increment">+</button>
    </div>
  </div>
  <p v-if="state.action" class="action text-center">
    {{ state.action }}
  </p>
  <a href="https://docs.plasmo.com" target="_blank"> View Docs </a>
</template>
<style>
.container {
  min-width: 470px;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 47px;
}
.text-center {
  text-align: center;
}
.action {
  color: #470;
  font-weight: bold;
}
</style>
<script setup lang="ts">
import { reactive } from "vue"
import type { App } from "vue"
const state = reactive({ count: 0, action: null })
function increment() {
  state.count++
  state.action = "increment"
}
function decrement() {
  state.count--
  state.action = "decrement"
}
defineOptions({
  prepare(app: App) {
  }
})
</script>
</file>

<file path="with-vue/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-vue/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": ["node_modules"],
  "include": [".plasmo/index.d.ts", "./**/*.ts", "./**/*.vue"],
  "compilerOptions": {
    "paths": {
      "~*": ["./*"]
    },
    "types": ["vue"],
    "baseUrl": "."
  }
}
</file>

<file path="with-web-accessible-resources/assets/logo.svg">
<svg viewBox="0 0 100 100" stroke="black" xmlns="http://www.w3.org/2000/svg">
  <path d="M 0 100 Q 25 0 75 100 z" style="fill:red;" />
  <path d="M 0 100 Q 50 0 100 100 z" fill="green" />
  <path d="M 50 100 Q 80 0 100 100 z" fill="currentcolor" />
</svg>
</file>

<file path="with-web-accessible-resources/resources/test.json">
{
  "hello": "world"
}
</file>

<file path="with-web-accessible-resources/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

#cache
.turbo
.next
.vercel

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*


# local env files
.env*

out/
build/
dist/

# plasmo - https://www.plasmo.com
.plasmo

# bpp - http://bpp.browser.market/
keys.json

# typescript
.tsbuildinfo
</file>

<file path="with-web-accessible-resources/.prettierrc.mjs">
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}
</file>

<file path="with-web-accessible-resources/package.json">
{
  "name": "with-web-accessible-resources",
  "displayName": "With web accessible resources",
  "version": "0.0.1",
  "description": "A basic Plasmo extension.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "contributors": [
    "louisgv"
  ],
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "plasmo": "workspace:*",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "prettier": "3.2.4",
    "typescript": "5.3.3"
  },
  "manifest": {
    "web_accessible_resources": [
      {
        "resources": [
          "_favicon/*"
        ],
        "matches": [
          "http://localhost:3000/*",
          "https://*.plasmo.com/*"
        ]
      },
      {
        "resources": [
          "~raw.js",
          "assets/pic*.png",
          "resources/test.json"
        ],
        "matches": [
          "https://www.plasmo.com/*"
        ]
      }
    ],
    "host_permissions": [
      "https://*/*"
    ]
  }
}
</file>

<file path="with-web-accessible-resources/popup.tsx">
import { useEffect, useState } from "react"
import Logo from "react:~assets/logo.svg"
const srcList = Array.from({
  length: 3
}).map((_, i) => chrome.runtime.getURL(`assets/pic${i}.png`))
function IndexPopup() {
  const [test, setTest] = useState()
  useEffect(() => {
    fetch(chrome.runtime.getURL("resources/test.json"))
      .then((r) => r.json())
      .then(setTest)
  }, [])
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16
      }}>
      <h1>
        Welcome to your <a href="https://www.plasmo.com">Plasmo</a> Extension!
      </h1>
      <Logo
        style={{
          color: "blue"
        }}
      />
      <div
        style={{
          display: "flex"
        }}>
        {srcList.map((src, i) => (
          <img key={i} src={src} style={{ width: 44, height: 44 }} />
        ))}
      </div>
      <code>{JSON.stringify(test, null, 2)}</code>
    </div>
  )
}
export default IndexPopup
</file>

<file path="with-web-accessible-resources/raw.js">
const v = 47
</file>

<file path="with-web-accessible-resources/README.md">
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!
</file>

<file path="with-web-accessible-resources/tsconfig.json">
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./*"
      ]
    },
    "baseUrl": "."
  }
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*

out/
build/
dist/

# plasmo
.plasmo

# typescript
.tsbuildinfo

# Lockfiles - See https://github.com/PlasmoHQ/p1asm0
pnpm-lock.yaml
package-lock.json
yarn.lock

.turbo
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2023 Plasmo Corp. <foss@plasmo.com> (https://www.plasmo.com) and contributors

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="README.md">
<p align="center">
  <a href="https://plasmo.com">
    <img alt="plasmo logo" width="75%" src="https://www.plasmo.com/assets/banner-black-on-white.png" />
  </a>
</p>

<p align="center">
  <a aria-label="License" href="./LICENSE">
    <img alt="See License" src="https://img.shields.io/npm/l/plasmo"/>
  </a>
  <a aria-label="Twitter" href="https://www.twitter.com/plasmohq">
    <img alt="Follow PlasmoHQ on Twitter" src="https://img.shields.io/twitter/follow/plasmohq?logo=twitter"/>
  </a>
  <a aria-label="Twitch Stream" href="https://www.twitch.tv/plasmohq">
    <img alt="Watch our Live DEMO every Friday" src="https://img.shields.io/twitch/status/plasmohq?logo=twitch&logoColor=white"/>
  </a>
  <a aria-label="Discord" href="https://www.plasmo.com/s/d">
    <img alt="Join our Discord for support and chat about our projects" src="https://img.shields.io/discord/946290204443025438?logo=discord&logoColor=white"/>
  </a>
</p>

# Plasmo Framework Examples

This repository showcases what's possible with the [Plasmo Framework](https://github.com/PlasmoHQ/plasmo)!

## Getting Started

The easiest way to get hacking on the Plasmo Framework is to run the `create plasmo` command!

```sh
pnpm create plasmo --with-<example-name>
# OR npm v7
npm create plasmo -- --with-<example-name>
```

For more detail, please read this documentation: https://docs.plasmo.com/framework/workflows/new#with-an-example-template

And see the discussion here for details on how to work with this example repository: https://discord.com/channels/946290204443025438/1044558522316234752

## Filing an issue to Request/Improve an Example

Please visit this [issue form](https://github.com/PlasmoHQ/plasmo/issues/new?assignees=&labels=documentation&template=2.example.yml&title=EXP+%7C+) in the [plasmo repo](https://github.com/PlasmoHQ/plasmo). Thanks 😀

## Documentation

Check out our [documentation](https://docs.plasmo.com) to get a deeper look into what the framework offers.

# License

[MIT](./LICENSE) ⭐ [Plasmo](https://www.plasmo.com)
</file>

</files>
